{"version":3,"sources":["actions/types.js","actions/alert.js","utils/setAuthToken.js","actions/auth.js","components/layout/Navbar.js","components/layout/Landing.js","components/auth/Login.js","components/auth/Register.js","components/layout/Alert.js","actions/profile.js","components/layout/spinner-gif.gif","components/layout/Spinner.js","components/dashboard/DashboardActions.js","components/dashboard/Experience.js","components/dashboard/Education.js","components/dashboard/Dashboard.js","components/profile-forms/CreateProfile.js","components/profile-forms/EditProfile.js","components/profile-forms/AddExperience.js","components/profile-forms/AddEducation.js","components/profiles/ProfileItem.js","components/profiles/Profiles.js","components/profile/ProfileTop.js","components/profile/ProfileAbout.js","components/profile/ProfileExperience.js","components/profile/ProfileEducation.js","components/profile/ProfileGithub.js","components/profile/Profile.js","components/posts/PostItem.js","actions/post.js","components/posts/PostForm.js","components/posts/Posts.js","components/post/CommentForm.js","components/post/CommentItem.js","components/post/Post.js","components/routing/PrivateRoute.js","reducers/alert.js","reducers/auth.js","reducers/profile.js","reducers/post.js","reducers/index.js","store.js","App.js","reportWebVitals.js","index.js"],"names":["SET_ALERT","REMOVE_ALERT","REGISTER_SUCCESS","REGISTER_FAIL","USER_LOADED","AUTH_ERROR","LOGIN_SUCCESS","LOGIN_FAIL","LOGOUT","GET_PROFILE","GET_PROFILES","GET_REPOS","CLEAR_REPOS","UPDATE_PROFILE","PROFILE_ERROR","CLEAR_PROFILE","DELETE_ACCOUNT","GET_POSTS","GET_POST","POST_ERROR","UPDATE_LIKES","DELETE_POST","ADD_POST","ADD_COMMENT","DELETE_COMMENT","setAlert","msg","alertType","timeout","dispatch","id","uuid","v4","type","payload","setTimeout","setAuthToken","token","axios","defaults","headers","common","loadUser","a","localStorage","get","res","data","connect","state","auth","logout","isAuthenticated","loading","authLinks","to","className","onClick","href","guestLinks","login","email","password","config","body","JSON","stringify","post","errors","response","forEach","error","useState","formData","setFormData","onChange","e","target","name","value","onSubmit","preventDefault","placeholder","required","minLength","register","password2","alerts","alert","length","map","getCurrentProfile","statusText","status","createProfile","history","edit","push","Spinner","src","spinner","style","width","margin","display","alt","DashboardActions","deleteExperience","delete","experience","experiences","exp","company","title","format","from","_id","deleteEducation","education","educations","edu","school","degree","profile","deleteAccount","window","confirm","user","useEffect","withRouter","link","website","location","skills","githubusername","bio","twitter","facebook","linkedin","youtube","instagram","displaySocialInputs","toggleSocialInputs","match","join","social","addExperience","put","current","description","toDateDisabled","toggleDisabled","class","checked","disabled","cols","rows","addEducation","fieldofstudy","ProfileItem","avatar","slice","skill","index","getProfiles","profiles","ProfileTop","rel","ProfileAbout","trim","split","ProfileExperience","ProfileEducation","repos","getGithubRepos","username","console","log","repo","html_url","stargazers_count","watchers_count","forks_count","getProfileById","userId","params","PostItem","addLike","removeLike","deletePost","text","likes","comments","date","showActions","defaultProps","postId","addPost","setText","getPosts","posts","addComment","deleteComment","commentId","comment","getPost","Component","component","rest","render","props","initialState","getItem","combineReducers","action","filter","setItem","removeItem","middleware","thunk","store","createStore","rootReducer","composeWithDevTools","applyMiddleware","App","exact","path","Landing","Register","Login","Profiles","Profile","Dashboard","CreateProfile","EditProfile","AddExperience","AddEducation","Posts","Post","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0179630e.chunk.js","sourcesContent":["export const SET_ALERT = \"SET_ALERT\";\r\nexport const REMOVE_ALERT = \"REMOVE_ALERT\";\r\nexport const REGISTER_SUCCESS = \"REGISTER_SUCCESS\";\r\nexport const REGISTER_FAIL = \"REGISTER_FAIL\";\r\nexport const USER_LOADED = \"USER_LOADED\";\r\nexport const AUTH_ERROR = \"AUTH_ERROR\";\r\nexport const LOGIN_SUCCESS = \"LOGIN_SUCCESS\";\r\nexport const LOGIN_FAIL = \"LOGIN_FAIL\";\r\nexport const LOGOUT = \"LOGOUT\";\r\nexport const GET_PROFILE = \"GET_PROFILE\";\r\nexport const GET_PROFILES = \"GET_PROFILES\";\r\nexport const GET_REPOS = \"GET_REPOS\";\r\nexport const CLEAR_REPOS = \"CLEAR_REPOS\";\r\nexport const UPDATE_PROFILE = \"UPDATE_PROFILE\";\r\nexport const PROFILE_ERROR = \"PROFILE_ERROR\";\r\nexport const CLEAR_PROFILE = \"CLEAR_PROFILE\";\r\nexport const DELETE_ACCOUNT = \"DELETE_ACCOUNT\";\r\nexport const GET_POSTS = \"GET_POSTS\";\r\nexport const GET_POST = \"GET_POST\";\r\nexport const POST_ERROR = \"POST_ERROR\";\r\nexport const UPDATE_LIKES = \"UPDATE_LIKES\";\r\nexport const DELETE_POST = \"DELETE_POST\";\r\nexport const ADD_POST = \"ADD_POST\";\r\nexport const ADD_COMMENT = \"ADD_COMMENT\";\r\nexport const DELETE_COMMENT = \"DELETE_COMMENT\";\r\n","import { v4 as uuid } from \"uuid\";\r\nimport { SET_ALERT, REMOVE_ALERT } from \"./types\";\r\n\r\n// Purpose: To send a custom alert message.\r\n\r\n// How it work: The action is called by passing in a msg\r\n// and alert type that can be used to custom the styling.\r\n// Note: A list of the alert styles can be found or added in App.js\r\n// Note: timeout is set at 5 seconds by default, but timeout can be made custom\r\n// by passing in timeout into the setTimeout function.\r\n\r\nexport const setAlert = (msg, alertType, timeout = 5000) => (dispatch) => {\r\n  const id = uuid.v4;\r\n  dispatch({\r\n    type: SET_ALERT,\r\n    payload: { msg, alertType, id },\r\n  });\r\n\r\n  setTimeout(() => dispatch({ type: REMOVE_ALERT, payload: id }), timeout);\r\n};\r\n","import axios from 'axios';\r\n\r\n// Purpose:\r\n//    1) To receive a token and set it as a default token using axios.defaults\r\n//    2) To delete a token that is set in axios.defaults if no token is found.\r\n\r\n// How it works:\r\n//    1) The function setAuthToken passes in token as a parameter.\r\n//    2) The function setAuthToken calls a if else statement that uses token as its conditional.\r\n// If token has a valid value then it will be set to axions.defaults.headers.common['x-auth-token]\r\n// so it can be accessed on any page of the application. Else, if the token does not have a valid \r\n// value then a delete action is called on axios.defaults.headers.common['x-auth-token] to delete it.\r\n\r\nconst setAuthToken = token => {\r\n    if(token) {\r\n        axios.defaults.headers.common['x-auth-token'] = token;\r\n    } else {\r\n        delete axios.defaults.headers.common['x-auth-token'];\r\n    }\r\n}\r\n\r\nexport default setAuthToken","import axios from \"axios\";\r\nimport { setAlert } from \"./alert\";\r\nimport {\r\n  REGISTER_SUCCESS,\r\n  REGISTER_FAIL,\r\n  USER_LOADED,\r\n  AUTH_ERROR,\r\n  LOGIN_SUCCESS,\r\n  LOGIN_FAIL,\r\n  LOGOUT,\r\n  CLEAR_PROFILE,\r\n} from \"./types\";\r\nimport setAuthToken from \"../utils/setAuthToken\";\r\n\r\n// Purpose:\r\n//    1) To identify if a token is stored in localStorage, if true,\r\n// the token gets sent to setAuthToken. Sends a request to \"/api/auth\" to check the\r\n// token to determine if it is valid. If the request is successful \"USER_LOADED\"\r\n// state is updated. Else \"AUTH_ERROR\" state is dispatched.\r\n//    2) To create an action that registers a user by sending the appropiate data\r\n// to the back-end for account creation.\r\n//    3) To create an action that logins a user by sending the email and password\r\n// to the back-end for validation.\r\n//    4) To create an action that clears the approiate data from the application state\r\n// and logs the user out.\r\n\r\n// How it works:\r\n//    1) The loadUser function makes a GET request to \"/api/auth\" if successful it will dispatch \"USER_LOADED\"\r\n// and send the returned data as a payload to be handeled by USER_LOADED reducer else dispatches AUTH_ERROR.\r\n//    2) The register function makes a POST request to \"/api/users\" with the config object and form data.\r\n// If request is successful then \"REGISTER_SUCCESS\" will be dispatched along with loadUser action.\r\n// Else user will be presented with an alert message displaying the error and \"REGISTER_FAIL\" will be dispatched.\r\n//    3) For both register and login function a config object is created with the needed headers\r\n// for making a post request to the back-end.\r\n//    4) The login function makes a POST request to \"/api/auth\" with the config object and form data.\r\n// If request is succesful then \"LOGIN_SUCCESS\" will be dispatched along with loadUser action.\r\n// Else user will be presented with an alert message displaying the error and \"LOGIN_FAIL\" will be dispatched.\r\n//    5) The logout function dispatches \"CLEARPROFILE\" and \"LOGOUT\"\r\n\r\n// Load User\r\nexport const loadUser = () => async (dispatch) => {\r\n  if (localStorage.token) {\r\n    setAuthToken(localStorage.token);\r\n  }\r\n\r\n  try {\r\n    // * Grabbing the user's profile from api/auth * //\r\n    const res = await axios.get(\"/api/auth\");\r\n\r\n    dispatch({\r\n      type: USER_LOADED,\r\n      payload: res.data,\r\n    });\r\n  } catch (error) {\r\n    dispatch({\r\n      type: AUTH_ERROR,\r\n    });\r\n  }\r\n};\r\n\r\n// Register User\r\nexport const register = ({ name, email, password }) => async (dispatch) => {\r\n  const config = {\r\n    headers: {\r\n      \"Content-Type\": \"application/json\",\r\n    },\r\n  };\r\n\r\n  const body = JSON.stringify({ name, email, password });\r\n  // Make a request to /api/users route and check to see what we get.\r\n  try {\r\n    const res = await axios.post(\"/api/users\", body, config);\r\n    dispatch({\r\n      type: REGISTER_SUCCESS,\r\n      payload: res.data,\r\n    });\r\n\r\n    dispatch(loadUser());\r\n  } catch (err) {\r\n    const errors = err.response.data.errors;\r\n\r\n    if (errors) {\r\n      errors.forEach((error) => dispatch(setAlert(error.msg, \"danger\")));\r\n    }\r\n\r\n    dispatch({\r\n      type: REGISTER_FAIL,\r\n    });\r\n  }\r\n};\r\n\r\n// Login User\r\nexport const login = (email, password) => async (dispatch) => {\r\n  const config = {\r\n    headers: {\r\n      \"Content-Type\": \"application/json\",\r\n    },\r\n  };\r\n\r\n  const body = JSON.stringify({ email, password });\r\n  // Make a request to /api/users route and check to see what we get.\r\n  try {\r\n    const res = await axios.post(\"/api/auth\", body, config);\r\n    dispatch({\r\n      type: LOGIN_SUCCESS,\r\n      payload: res.data,\r\n    });\r\n\r\n    dispatch(loadUser());\r\n  } catch (err) {\r\n    const errors = err.response.data.errors;\r\n\r\n    if (errors) {\r\n      errors.forEach((error) => dispatch(setAlert(error.msg, \"danger\")));\r\n    }\r\n\r\n    dispatch({\r\n      type: LOGIN_FAIL,\r\n    });\r\n  }\r\n};\r\n\r\n// Logout / Clear Profile\r\nexport const logout = () => (dispatch) => {\r\n  dispatch({ type: CLEAR_PROFILE });\r\n  dispatch({ type: LOGOUT });\r\n};\r\n","import React, { Fragment } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { connect } from \"react-redux\";\r\nimport PropTypes from \"prop-types\";\r\nimport { logout } from \"../../actions/auth\";\r\n\r\n// Purpose:\r\n//    1) To provide navigation to the user on every page of the site.\r\n//    2) To provide the ability for the user to logout of their account.\r\n\r\n// How it works:\r\n//    1) The Navbar function takes in isAuthenticated state and loading from the deconstructed\r\n// auth state, and logout action as a parameter.\r\n//    2) A constant named authLinks is created as a JSX component that returns an unordered list with\r\n// li tags that contain links to the profiles, posts, and dashboard pages. The Link function from\r\n// react-router-dom is used for this. Lastly, there is a li tag with a 'a' tag that contains an onClick\r\n// property that is assigned and will call the logout action.\r\n//    3) A constant named guestLinks is created a JSX component that returns an unordered list with\r\n// li tags that contain links to the profiles, register, and login pages.\r\n//    4) The Navbar function returns a nav tag that contains an h1 tag that has a Link to the root route.\r\n// JSX is used to check to see if the page is not loading and then returns a Fragment with a ternary\r\n// operator that will check isAuthenticated and load in authLinks on true or the guestLinks on false.\r\n//    5) The logout action and auth state is defined in Navbar.propTypes. The logout action is defined\r\n// as a required function, and the auth state is defined as a required object.\r\n//    6) mapStateToProps defines the auth state using state.auth\r\n\r\nconst Navbar = ({ auth: { isAuthenticated, loading }, logout }) => {\r\n  const authLinks = (\r\n    <ul>\r\n      <li>\r\n        <Link to=\"/profiles\">Developers</Link>\r\n      </li>\r\n      <li>\r\n        <Link to=\"/posts\">Posts</Link>\r\n      </li>\r\n      <li>\r\n        <Link to=\"/dashboard\">\r\n          <i className=\"fas fa-user\" />\r\n          <span className=\"hide-sm\">Dashboard</span>\r\n        </Link>\r\n      </li>\r\n      <li>\r\n        <a onClick={logout} href=\"#!\">\r\n          <i className=\"fas fa-sign-out-alt\"></i>{\" \"}\r\n        </a>\r\n      </li>\r\n    </ul>\r\n  );\r\n\r\n  const guestLinks = (\r\n    <ul>\r\n      <li>\r\n        <Link to=\"/profiles\">Developers</Link>\r\n      </li>\r\n      <li>\r\n        <Link to=\"/register\">Register</Link>\r\n      </li>\r\n      <li>\r\n        <Link to=\"/login\">Login</Link>\r\n      </li>\r\n    </ul>\r\n  );\r\n  return (\r\n    <nav className=\"navbar bg-dark\">\r\n      <h1>\r\n        <Link to=\"/\">\r\n          <i className=\"f!#\"></i> DevConnector\r\n        </Link>\r\n      </h1>\r\n      {!loading && (\r\n        <Fragment>{isAuthenticated ? authLinks : guestLinks}</Fragment>\r\n      )}\r\n    </nav>\r\n  );\r\n};\r\n\r\nNavbar.propTypes = {\r\n  logout: PropTypes.func.isRequired,\r\n  auth: PropTypes.object.isRequired,\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n  auth: state.auth,\r\n});\r\n\r\nexport default connect(mapStateToProps, { logout })(Navbar);\r\n","import React from \"react\";\r\nimport { Link, Redirect } from \"react-router-dom\";\r\nimport { connect } from \"react-redux\";\r\nimport PropTypes from \"prop-types\";\r\n\r\n// Purpose:\r\n//    1) To have a page first time visitors can get information about what the website is for.\r\n//    2) To have prompts for a user to register or login.\r\n\r\n// How it works:\r\n//    1) The Landing function takes in isAuthenticated as a parameter.\r\n//    2) If the isAuthenticated state contains a truth value, then a Redirect component is returned\r\n// that takes the user to the /dashboard route.\r\n//    3) The Landing function returns a section that displays the site name, a description of what\r\n// the site does, and buttons that link the user to the register and login page using the Link component.\r\n//    4) The isAuthenticated state is defined in Landing.propTypes as a boolean.\r\n//    5) mapStateToProps defines isAuthenticated state using state.auth.isAuthenticated\r\n\r\nconst Landing = ({ isAuthenticated }) => {\r\n  if (isAuthenticated) {\r\n    return <Redirect to=\"/dashboard\" />;\r\n  }\r\n  return (\r\n    <section className=\"landing\">\r\n      <div className=\"dark-overlay\">\r\n        <div className=\"landing-inner\">\r\n          <h1 className=\"x-large\">Developer Connector</h1>\r\n          <p className=\"lead\">\r\n            Create a developer profile/portfolio, share posts and get help from\r\n            other developers\r\n          </p>\r\n          <div className=\"buttons\">\r\n            <Link to=\"/register\" className=\"btn btn-primary\">\r\n              Sign Up\r\n            </Link>\r\n            <Link to=\"/login\" className=\"btn btn-light\">\r\n              Login\r\n            </Link>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </section>\r\n  );\r\n};\r\n\r\nLanding.propTypes = {\r\n  isAuthenticated: PropTypes.bool,\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n  isAuthenticated: state.auth.isAuthenticated,\r\n});\r\n\r\nexport default connect(mapStateToProps)(Landing);\r\n","import React, { Fragment, useState } from \"react\";\r\nimport { Link, Redirect } from \"react-router-dom\";\r\nimport { connect } from \"react-redux\";\r\nimport PropTypes from \"prop-types\";\r\nimport { login } from \"../../actions/auth\";\r\n\r\n// Purpose:\r\n//    1) To prompt a user to login with their email and password and sending the information to the backend\r\n// for validation.\r\n//    2) To check to see if the user is already logged in by checking their authetnication and if they are\r\n// redirecting them to the dashboard page.\r\n\r\n// How it works:\r\n//    1) The Login function takes in a login action from actions/auth and isAuthenticated state via\r\n// mapStateToProps.\r\n//    2) The Login function uses useState to create a formData object setting the email and password\r\n// properties to empty strings.\r\n//    3) An onChange function is created that will call setFormData in order to call useState to update\r\n// the formData object with the new values.\r\n//    4) An onSubmit function is created that will call the login action with the parameters email and\r\n// password that was deconstructed off of the formData object.\r\n//    5) An if statement will check if the isAuthenticated stateToProp contains a truth value. If it does\r\n// it will return a react-router component called Redirect that will redirect the user to the dashboard page.\r\n//    6) If there is no truth value for isAuthenticated then the Login function will return a Fragment\r\n// that contains the necessary form and input html needed to describe what data needs to be entered and where.\r\n//    7) On both the email and password input tags is a value and onChange Key-Value pair. The key of the\r\n// onChange Key-Value pair is assigned to either the email or password value Key-Value pair gotten from the\r\n// formData object, and is updated by the onChange function that is updating the formData state by calling\r\n// the setFormData function. The setFormData function fills the object with the current formData by the spread\r\n// operator and gets the key by calling e.target.name and assigning its value by getting e.target.value.\r\n// Now we have formData state having the same data that is being typed in by our user.\r\n//    8) Finally, on the form tag a onSubmit key is set to a function that calls the function onSubmit,\r\n// asynchorously, and preventing event default, so it can call the login action with the Key-Values of email\r\n// and password.\r\n//    9) The login action and isAuthenticated props are defined in Login.propTypes. The login action is\r\n// defined as a required function. The isAuthenticated is defined as a boolean.\r\n//    10) isAuthenticated is defined in the object creating function mapStateToProps by passing in the state\r\n// object with the ability of connect from react-redux packpage.\r\n// isAuthenticated is set to state.auth.isAuthenticated\r\n\r\nconst Login = ({ login, isAuthenticated }) => {\r\n  const [formData, setFormData] = useState({\r\n    email: \"\",\r\n    password: \"\",\r\n  });\r\n\r\n  const { email, password } = formData;\r\n\r\n  // * Creating onChange event to update formData object. *\r\n  // Using [e.target.name] to select the value of name attribute\r\n  const onChange = (e) =>\r\n    setFormData({ ...formData, [e.target.name]: e.target.value });\r\n\r\n  const onSubmit = async (e) => {\r\n    e.preventDefault();\r\n    login(email, password);\r\n  };\r\n\r\n  // Redirect if logged in\r\n  if (isAuthenticated) {\r\n    return <Redirect to=\"/dashboard\" />;\r\n  }\r\n\r\n  return (\r\n    <Fragment>\r\n      <h1 className=\"large text-primary\">Sign In</h1>\r\n      <p className=\"lead\">\r\n        <i className=\"fas fa-user\"></i> Sign into your account\r\n      </p>\r\n      <form className=\"form\" onSubmit={(e) => onSubmit(e)}>\r\n        <div className=\"form-group\">\r\n          <input\r\n            type=\"email\"\r\n            placeholder=\"Email Address\"\r\n            name=\"email\"\r\n            value={email}\r\n            onChange={(e) => onChange(e)}\r\n            required\r\n          />\r\n        </div>\r\n        <div className=\"form-group\">\r\n          <input\r\n            type=\"password\"\r\n            placeholder=\"Password\"\r\n            name=\"password\"\r\n            minLength=\"6\"\r\n            value={password}\r\n            onChange={(e) => onChange(e)}\r\n          />\r\n        </div>\r\n        <input type=\"submit\" className=\"btn btn-primary\" value=\"Login\" />\r\n      </form>\r\n      <p className=\"my-1\">\r\n        Don't have an account? <Link to=\"/register\">Sign Up</Link>\r\n      </p>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nLogin.propTypes = {\r\n  login: PropTypes.func.isRequired,\r\n  isAuthenticated: PropTypes.bool,\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n  isAuthenticated: state.auth.isAuthenticated,\r\n});\r\n\r\nexport default connect(mapStateToProps, { login })(Login);\r\n","import React, { Fragment, useState } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { Link, Redirect } from \"react-router-dom\";\r\nimport { setAlert } from \"../../actions/alert\";\r\nimport { register } from \"../../actions/auth\";\r\nimport PropTypes from \"prop-types\";\r\n\r\n// Purpose:\r\n//    1) To prompt the user to register with an name, email, password, and cofirm the password they entered.\r\n// Sending the information to the backend for validation.\r\n//    2) To check to see if the user is already logged in by checking their authetnication and if they are\r\n// redirecting them to the dashboard page.\r\n\r\n// How it works:\r\n//    1) The Register function takes in a setAlert and register action from actions/alert and actions/auth,\r\n// respectively. The Register function also takes in isAuthenticated state via mapStateToProps.\r\n//    2) The Register function uses useState to create a formData object setting the name, email, password,\r\n// and password2 (used as password confirmation) properties to empty strings.\r\n//    3) An onChange function is created that will call setFormData in order to call useState to update\r\n// the formData object with the new values.\r\n//    4) An onSubmit function is created that will call a setAlert action with the message\r\n// \"Passwords do not match\" IF password and password2 do NOT match. Else the register action will be called\r\n// with the parameters name, email, and password that was deconstructed off of the formData object\r\n// IF password and password2 match.\r\n//    5) An if statement will check if the isAuthenticated stateToProp contains a truth value. If it does\r\n// it will return a react-router component called Redirect that will redirect the user to the dashboard page.\r\n//    6) If there is no truth value for isAuthenticated then the Register function will return a Fragment\r\n// that contains the necessary form and input html needed to describe what data needs to be entered and where.\r\n//    7) On name, email, password, and password2 input tags is a value and onChange Key-Value pair.\r\n// The key of the onChange Key-Value pair is assigned to the appropiate value Key-Value gotten from the formData\r\n// object that is updated by the onChange function that is updating the formData state by calling the\r\n// setFormData function. The setFormData function fills the object with the current formData by the spread\r\n// operator and gets the key by calling e.target.name and assigning its value by getting e.target.value.\r\n// Now we have formData state having the same data that is being typed in by our user.\r\n//    8) Finally, on the form tag a onSubmit key is set to a function that calls the function onSubmit,\r\n// asynchorously, and preventing event default, so it can call the register action with the Key-Values of\r\n// name, email, and password.\r\n//    9) The register action, the setAlert action, and isAuthenticated props are defined in Register.propTypes.\r\n// The register and setAlert actions is defined as a required function. The isAuthenticated is defined as a boolean.\r\n//    10) isAuthenticated is defined in the object creating function mapStateToProps by passing in the state\r\n// object with the ability of connect from react-redux packpage.\r\n// isAuthenticated is set to state.auth.isAuthenticated\r\n\r\nconst Register = ({ setAlert, register, isAuthenticated }) => {\r\n  // Destructuring off of props.\r\n\r\n  const [formData, setFormData] = useState({\r\n    name: \"\",\r\n    email: \"\",\r\n    password: \"\",\r\n    password2: \"\",\r\n  });\r\n\r\n  const { name, email, password, password2 } = formData;\r\n\r\n  // * Creating onChange event to update formData object. *\r\n  // Using [e.target.name] to select the value assigned to\r\n  // the name property and set it equal to that\r\n  // target's value property value.\r\n  const onChange = (e) =>\r\n    setFormData({ ...formData, [e.target.name]: e.target.value });\r\n\r\n  const onSubmit = async (e) => {\r\n    e.preventDefault();\r\n    if (password !== password2) {\r\n      setAlert(\"Passwords do not match\", \"danger\");\r\n    } else {\r\n      register({ name, email, password });\r\n    }\r\n  };\r\n\r\n  if (isAuthenticated) {\r\n    return <Redirect to=\"/dashboard\" />;\r\n  }\r\n\r\n  return (\r\n    <Fragment>\r\n      <h1 className=\"large text-primary\">Sign Up</h1>\r\n      <p className=\"lead\">\r\n        <i className=\"fas fa-user\"></i> Create Your Account\r\n      </p>\r\n      <form className=\"form\" onSubmit={(e) => onSubmit(e)}>\r\n        <div className=\"form-group\">\r\n          <input\r\n            type=\"text\"\r\n            placeholder=\"Name\"\r\n            name=\"name\"\r\n            value={name}\r\n            onChange={(e) => onChange(e)}\r\n            required\r\n          />\r\n        </div>\r\n        <div className=\"form-group\">\r\n          <input\r\n            type=\"email\"\r\n            placeholder=\"Email Address\"\r\n            name=\"email\"\r\n            value={email}\r\n            onChange={(e) => onChange(e)}\r\n            required\r\n          />\r\n          <small className=\"form-text\">\r\n            This site uses Gravatar so if you want a profile image, use a\r\n            Gravatar email\r\n          </small>\r\n        </div>\r\n        <div className=\"form-group\">\r\n          <input\r\n            type=\"password\"\r\n            placeholder=\"Password\"\r\n            name=\"password\"\r\n            minLength=\"6\"\r\n            value={password}\r\n            onChange={(e) => onChange(e)}\r\n          />\r\n        </div>\r\n        <div className=\"form-group\">\r\n          <input\r\n            type=\"password\"\r\n            placeholder=\"Confirm Password\"\r\n            name=\"password2\"\r\n            minLength=\"6\"\r\n            value={password2}\r\n            onChange={(e) => onChange(e)}\r\n          />\r\n        </div>\r\n        <input type=\"submit\" className=\"btn btn-primary\" value=\"Register\" />\r\n      </form>\r\n      <p className=\"my-1\">\r\n        Already have an account? <Link to=\"/login\">Sign In</Link>\r\n      </p>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nRegister.propTypes = {\r\n  setAlert: PropTypes.func.isRequired,\r\n  register: PropTypes.func.isRequired,\r\n  isAuthenticated: PropTypes.bool,\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n  isAuthenticated: state.auth.isAuthenticated,\r\n});\r\n\r\nexport default connect(mapStateToProps, { setAlert, register })(Register);\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { connect } from \"react-redux\";\r\n\r\n// Creating Alert component\r\n// ** Checking to see if they are alert.  **\r\n// ** If there is an alert, than map through and return JSX.\r\n// ** Passing along the alert message and styling with alertType.\r\n\r\n// Purpose:\r\n//    1) To create divs for the alerts state.\r\n//    2) To display the alert message and adding the appropriate className to style the alert.\r\n\r\n// How it works:\r\n//    1) The Alert function takes in alerts as a parameter.\r\n//    2) Checks to see if the alerts array is NOT equal to null or NOT empty.\r\n//    3) If both conditions pass, a map function is called on the alerts array.\r\n//    4) The alerts.map takes in alert as the single instance of the array and returns a div with a key\r\n// attribute with the value of alert.id and a className attribute with the value of `alert alert-${alert.alertType}`\r\n// where alertType is being passed in from the alert state.\r\n//    5) In the single instance of the map function, the alert message is stored inside via alert.msg with JSX.\r\n//    6) The alerts state is defined in Alert.propTypes as a required array.\r\n//    7) mapStateToProps defines alerts using state.alert\r\n\r\nconst Alert = ({ alerts }) =>\r\n  alerts !== null &&\r\n  alerts.length > 0 &&\r\n  alerts.map((alert) => (\r\n    <div key={alert.id} className={`alert alert-${alert.alertType}`}>\r\n      {alert.msg}\r\n    </div>\r\n  ));\r\n\r\nAlert.propTypes = {\r\n  alerts: PropTypes.array.isRequired,\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n  alerts: state.alert,\r\n});\r\n\r\nexport default connect(mapStateToProps)(Alert);\r\n","import axios from \"axios\";\r\nimport { setAlert } from \"./alert\";\r\n\r\nimport {\r\n  GET_PROFILE,\r\n  GET_PROFILES,\r\n  PROFILE_ERROR,\r\n  UPDATE_PROFILE,\r\n  CLEAR_PROFILE,\r\n  DELETE_ACCOUNT,\r\n  GET_REPOS,\r\n  CLEAR_REPOS,\r\n} from \"./types\";\r\n\r\n// Purpose:\r\n//    1) To handle all the application actions that will make a request to \"/api/profile\".\r\n// The actions a user may trigger are getting the current profile, getting all profiles,\r\n// getting a profile by id, getting Github repos, creating a profile or updating it,\r\n// adding experiences to profile, adding education to profile, deleting experiences from\r\n// a profile, deleting education from a profile, deleting the account.\r\n//    2) To update the state of the application. All the states that are being updated\r\n// in this file are found in reducers/profile.js\r\n//    Note: If you have already gone through actions/post.js you will see more or less\r\n// the same description in the 'How it work' section, as the functions are very similar in,\r\n// structure just different variable names and routes being hit.\r\n\r\n// How it works:\r\n//    1) The getCurrentProfile function makes a GET request to \"/api/profile/me\". If successful, it will\r\n// dispatch \"GET_PROFILE\" and send the returned data found in res.data as a payload to be handled by the\r\n// \"GET_PROFILE\" reducer else dispatches PROFILE_ERROR with the error status and error message returned by\r\n// \"/api/profile/me\" as the payload.\r\n//    2) The getProfiles function makes a GET request to \"/api/profile\". If successful it will dispatch\r\n// \"GET_PROFILES\" and send the returned data found in res.data as a payload to be handled by the\r\n// \"GET_PROFILES\" reducer else dispatches PROFILE_ERROR with the error status and error message returned by\r\n// \"/api/profile\" as the payload.\r\n//    3) The getProfileById function takes in a userId and makes a GET request to \"/api/profile/user/:userId\".\r\n// If successful it will dispatch \"GET_PROFILE\" with res.data as a payload to be handled by the \"GET_PROFILE\"\r\n// reducer. If unsuccessful it will dispatch \"PROFILE_ERROR\".\r\n//    4) The getGithubRepos function takes in a username and makes a GET request to\r\n// \"/api/profile/github/:username\". If successful it will dispatch \"GET_REPOS with res.data as a payload\r\n// to be handled by the \"GET_REPOS\" reducer. If unsuccessful and returned with a err.response.status of 404\r\n// it will dispatch \"CLEAR_REPOS, else it will dispatch \"PROFILE_ERROR\".\r\n//    5) The createProfile function takes in an object named formData, history, edit parameter set to false as\r\n// parameters. The edit parameter determines if the action being called is being triggered by first time\r\n// profile creation or the editing of an existing profile. The history parameter is react router object that\r\n// allows for url modification. In the try catch, a config object is created with the necessary headers for\r\n// making a POST request to \"/api/profile\" sending with it the config and formData objects. If successful\r\n// it will dispatch \"GET_PROFILE\" with res.data as a payload to be handled by the \"GET_PROFILE\" reducer\r\n// and then will dispatch a setAlert action with either \"Profile Updated\" or \"Profile Created\" depending on\r\n// the truth value of the passed in edit parameter as its message. After alerts are sent an if statement\r\n// will check to see if the edit parameter is set to the defaulted false, meaning the profile is being\r\n// created for the first time and will move the user to the dashboard page via history.push method.\r\n// If try catch, is unsuccessful, it will store the error responses in a constant named errors and loop\r\n// through each of the errors dispatching setAlert action with the corresponding error message.\r\n// Finally, it will dispatch \"PROFILE_ERROR\".\r\n//    6) The addExperience function takes in an object named formData and history as parameters.\r\n// A config object is created with the necessary headers. A PUT request is made to \"/api/profile/experience\"\r\n// sending with it the formData object and the config object. If successful it will dispatch \"UPDATE_PROFILE\"\r\n// with res.data as a payload to be handled by the \"UPDATE_PROFILE\" reducer. A dispatch setAlert action\r\n// with the message \"Experience Added\" will be called and along with history.push(\"/dashboard\").\r\n// If the try catch, is unsuccessful, it will handle it the same way as the createProfile function (number 5).\r\n//    7) The addEducation function works exactly like addExperience other than the route being hit is\r\n// \"/api/profile/education\".\r\n//    8) The deleteExperience function takes in an id and makes a DELETE request to\r\n// \"/api/profile/experience/:id\". If successful, it will dispatch \"UPDATE_PROFILE\" with res.data as the payload\r\n// and then dispatch the setAlert action with the message \"Experience Removed\". If unsuccessful, it will\r\n// handle it the same way as the addExperience function (number 5).\r\n//    9) The deleteEducation function works exactly like deleteEducation other than the route being hit is\r\n// \"/api/profile/education/:id\".\r\n//    10) The deleteAccount function takes in no parameters. An if state houses the try catch to be executed\r\n// if the user confirms the prompt to continue with account deletion. If confirmed, it will make a DELETE\r\n// request to \"/api/profile\". If the delete request is successful, then \"CLEAR_PROFILE\" will be dispatched\r\n// followed by \"DELETE_ACCOUNT\". After that a setAlert action will be dispatched with the message...\r\n// \"Your account has been permantly deleted...\". If the delete request is unsuccessful then it will be handled\r\n// the same way as the previous functions do.\r\n\r\n// Get current users profile\r\nexport const getCurrentProfile = () => async (dispatch) => {\r\n  try {\r\n    // Get's current user's profile from our backend that has token.\r\n    const res = await axios.get(\"/api/profile/me\");\r\n\r\n    dispatch({\r\n      type: GET_PROFILE,\r\n      payload: res.data,\r\n    });\r\n  } catch (err) {\r\n    dispatch({\r\n      type: PROFILE_ERROR,\r\n      payload: { msg: err.response.statusText, status: err.response.status },\r\n    });\r\n  }\r\n};\r\n\r\n// Get all profiles\r\nexport const getProfiles = () => async (dispatch) => {\r\n  try {\r\n    // Get's current user's profile from our backend that has token.\r\n    const res = await axios.get(\"/api/profile\");\r\n\r\n    dispatch({\r\n      type: GET_PROFILES,\r\n      payload: res.data,\r\n    });\r\n  } catch (err) {\r\n    dispatch({\r\n      type: PROFILE_ERROR,\r\n      payload: { msg: err.response.statusText, status: err.response.status },\r\n    });\r\n  }\r\n};\r\n\r\n// Get profile by ID\r\nexport const getProfileById = (userId) => async (dispatch) => {\r\n  try {\r\n    // Get's a user's profile from the user ID (not the profile ID.\r\n    const res = await axios.get(`/api/profile/user/${userId}`);\r\n\r\n    dispatch({\r\n      type: GET_PROFILE,\r\n      payload: res.data,\r\n    });\r\n  } catch (err) {\r\n    dispatch({\r\n      type: PROFILE_ERROR,\r\n      payload: { msg: err.response.statusText, status: err.response.status },\r\n    });\r\n  }\r\n};\r\n\r\n// Get Github repos\r\nexport const getGithubRepos = (username) => async (dispatch) => {\r\n  try {\r\n    // Get's users Github repos.\r\n    const res = await axios.get(`/api/profile/github/${username}`);\r\n\r\n    dispatch({\r\n      type: GET_REPOS,\r\n      payload: res.data,\r\n    });\r\n  } catch (err) {\r\n    console.log(err.response.status);\r\n    if (err.response.status === 404) {\r\n      dispatch({\r\n        type: CLEAR_REPOS,\r\n      });\r\n      return;\r\n    }\r\n    dispatch({\r\n      type: PROFILE_ERROR,\r\n      payload: { msg: err.response.statusText, status: err.response.status },\r\n    });\r\n  }\r\n};\r\n\r\n// Create or update profile\r\n//* Using the edit parameter to distinguish between a user creating a profile\r\n//* versus a user who is updating a profile in order to know where to\r\n//* redirect them on completion. Using history.push to send user to dashboard page.\r\n\r\nexport const createProfile = (formData, history, edit = false) => async (\r\n  dispatch\r\n) => {\r\n  try {\r\n    const config = {\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n    };\r\n\r\n    const res = await axios.post(\"/api/profile\", formData, config);\r\n\r\n    dispatch({\r\n      type: GET_PROFILE,\r\n      payload: res.data,\r\n    });\r\n    // We have a css class of success that will be used for the styling of the alert.\r\n    dispatch(setAlert(edit ? \"Profile Updated\" : \"Profile Created\", \"success\"));\r\n\r\n    if (!edit) {\r\n      history.push(\"/dashboard\");\r\n    }\r\n  } catch (err) {\r\n    const errors = err.response.data.errors;\r\n\r\n    if (errors) {\r\n      // We have a css class of danger that will be used for the styling of the alert.\r\n      errors.forEach((error) => dispatch(setAlert(error.msg, \"danger\")));\r\n    }\r\n\r\n    dispatch({\r\n      type: PROFILE_ERROR,\r\n      payload: { msg: err.response.statusText, status: err.response.status },\r\n    });\r\n  }\r\n};\r\n\r\n// Add Experience\r\nexport const addExperience = (formData, history) => async (dispatch) => {\r\n  try {\r\n    const config = {\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n    };\r\n\r\n    const res = await axios.put(\"/api/profile/experience\", formData, config);\r\n\r\n    dispatch({\r\n      type: UPDATE_PROFILE,\r\n      payload: res.data,\r\n    });\r\n    // We have a css class of success that will be used for the styling of the alert.\r\n    dispatch(setAlert(\"Experience Added\", \"success\"));\r\n    history.push(\"/dashboard\");\r\n  } catch (err) {\r\n    const errors = err.response.data.errors;\r\n    if (errors) {\r\n      // We have a css class of danger that will be used for the styling of the alert.\r\n      errors.forEach((error) => dispatch(setAlert(error.msg, \"danger\")));\r\n    }\r\n\r\n    dispatch({\r\n      type: PROFILE_ERROR,\r\n      payload: { msg: err.response.statusText, status: err.response.status },\r\n    });\r\n  }\r\n};\r\n\r\n// Add Education\r\nexport const addEducation = (formData, history) => async (dispatch) => {\r\n  try {\r\n    const config = {\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n    };\r\n\r\n    const res = await axios.put(\"/api/profile/education\", formData, config);\r\n\r\n    dispatch({\r\n      type: UPDATE_PROFILE,\r\n      payload: res.data,\r\n    });\r\n    // We have a css class of success that will be used for the styling of the alert.\r\n    dispatch(setAlert(\"Education Added\", \"success\"));\r\n    history.push(\"/dashboard\");\r\n  } catch (err) {\r\n    const errors = err.response.data.errors;\r\n\r\n    if (errors) {\r\n      // We have a css class of danger that will be used for the styling of the alert.\r\n      errors.forEach((error) => dispatch(setAlert(error.msg, \"danger\")));\r\n    }\r\n\r\n    dispatch({\r\n      type: PROFILE_ERROR,\r\n      payload: { msg: err.response.statusText, status: err.response.status },\r\n    });\r\n  }\r\n};\r\n\r\n// Delete Experience\r\nexport const deleteExperience = (id) => async (dispatch) => {\r\n  try {\r\n    const res = await axios.delete(`/api/profile/experience/${id}`);\r\n\r\n    dispatch({\r\n      type: UPDATE_PROFILE,\r\n      payload: res.data,\r\n    });\r\n\r\n    dispatch(setAlert(\"Experience Removed\", \"success\"));\r\n  } catch (err) {\r\n    const errors = err.response.data.errors;\r\n\r\n    if (errors) {\r\n      // We have a css class of danger that will be used for the styling of the alert.\r\n      errors.forEach((error) => dispatch(setAlert(error.msg, \"danger\")));\r\n    }\r\n\r\n    dispatch({\r\n      type: PROFILE_ERROR,\r\n      payload: { msg: err.response.statusText, status: err.response.status },\r\n    });\r\n  }\r\n};\r\n\r\n// Delete Education\r\nexport const deleteEducation = (id) => async (dispatch) => {\r\n  try {\r\n    const res = await axios.delete(`/api/profile/education/${id}`);\r\n\r\n    dispatch({\r\n      type: UPDATE_PROFILE,\r\n      payload: res.data,\r\n    });\r\n\r\n    dispatch(setAlert(\"Education Removed\", \"success\"));\r\n  } catch (err) {\r\n    const errors = err.response.data.errors;\r\n\r\n    if (errors) {\r\n      // We have a css class of danger that will be used for the styling of the alert.\r\n      errors.forEach((error) => dispatch(setAlert(error.msg, \"danger\")));\r\n    }\r\n\r\n    dispatch({\r\n      type: PROFILE_ERROR,\r\n      payload: { msg: err.response.statusText, status: err.response.status },\r\n    });\r\n  }\r\n};\r\n\r\n// Delete Account and Profile\r\nexport const deleteAccount = () => async (dispatch) => {\r\n  if (window.confirm(\"Are you sure? This can NOT Be undone!\")) {\r\n    try {\r\n      await axios.delete(`/api/profile/`);\r\n      // Deleting account and clearing profile out of state.\r\n      dispatch({\r\n        type: CLEAR_PROFILE,\r\n      });\r\n      dispatch({\r\n        type: DELETE_ACCOUNT,\r\n      });\r\n\r\n      dispatch(setAlert(\"Your account has been permantly deleted...\"));\r\n    } catch (err) {\r\n      const errors = err.response.data.errors;\r\n\r\n      if (errors) {\r\n        // We have a css class of danger that will be used for the styling of the alert.\r\n        errors.forEach((error) => dispatch(setAlert(error.msg, \"danger\")));\r\n      }\r\n\r\n      dispatch({\r\n        type: PROFILE_ERROR,\r\n        payload: { msg: err.response.statusText, status: err.response.status },\r\n      });\r\n    }\r\n  }\r\n};\r\n","export default __webpack_public_path__ + \"static/media/spinner-gif.beb9d29b.gif\";","import React, { Fragment } from \"react\";\r\nimport spinner from \"./spinner-gif.gif\";\r\n\r\n// Purpose:\r\n//    1) To have an image that will display when the page is loading/getting data to return\r\n// to the page. It may also display if an error has occureded somewhere in the application and\r\n// cannot return the appropriate data needed for the component.\r\n\r\n// How it works:\r\n//    1) The Spinner function takes in no parameters.\r\n//    2) The Spinner function returns a fragment that contains an image tag.\r\n//    3) The image tag uses a JSX variable to import the src img using the imported spinner image.\r\n//    4) Inline styles are applied via the style property, and the alt property defines an alt tag.\r\n\r\nconst Spinner = () => (\r\n  <Fragment>\r\n    <img\r\n      src={spinner}\r\n      style={{ width: \"200px\", margin: \"auto\", display: \"block\" }}\r\n      alt=\"Loading...\"\r\n    />\r\n  </Fragment>\r\n);\r\n\r\nexport default Spinner;\r\n","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\n// Purpose:\r\n//    1) To provide links to the appropriate routes to edit profile, add experience, or add education.\r\n\r\n// How it works:\r\n//    1) Takes in no parameters and returns a div of Link tags. Link is a function that we import from\r\n// react-router-dom. (Not much else to say?)\r\n//    2) Here is some docs on Link if you are unsure of how it works: https://reactrouter.com/web/api/Link\r\n\r\nconst DashboardActions = () => {\r\n  return (\r\n    <div className=\"dash-buttons\">\r\n      <Link to=\"/edit-profile\" className=\"btn btn-light\">\r\n        <i className=\"fas fa-user-circle text-primary\"></i> Edit Profile\r\n      </Link>\r\n      <Link to=\"/add-experience\" className=\"btn btn-light\">\r\n        <i className=\"fab fa-black-tie text-primary\"></i> Add Experience\r\n      </Link>\r\n      <Link to=\"/add-education\" className=\"btn btn-light\">\r\n        <i className=\"fas fa-graduation-cap text-primary\"></i> Add Education\r\n      </Link>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DashboardActions;\r\n","import React, { Fragment } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport Moment from \"react-moment\";\r\nimport { connect } from \"react-redux\";\r\nimport { deleteExperience } from \"../../actions/profile\";\r\n\r\n// Purpose:\r\n//    1) To return a table containing the user's experience credentials.\r\n//    2) To provide the ability to delete specific experience credentials.\r\n\r\n// How it works:\r\n//    1) The Experience function takes in experience state and the deleteExperiences action as parameters.\r\n//    2) A constant name experiences is created to store the results of a map function.\r\n//    3) The map function takes in a parameter edu as the single item of each value in the experience\r\n// array. The map creates a key by assigning exp._id to tr tag.\r\n//    4) Table data is added with exp.school and exp.degree.\r\n//    5) A Moment fragment is brought in using a YYYY/MM/DD format to format the exp.from and the exp.to\r\n// values. If exp.to is null based on a ternary operator check then a sting of \" Now\" is returned instead.\r\n//    6) Lastly, for experience.map function, a table data with a button that contains an onClick property\r\n// that executes an anonymous function that calls deleteExperiences passing in exp._id as a parameter.\r\n//    7) The Experience function returns a Fragment with a header of Experience Credentials table HTML structuring\r\n// containing the table head of Title and Years. The table body is const experiences passed in as JSX.\r\n//    8) The experience state and deleteExperiences action are defined in Education.propTypes. The experiences\r\n// state is defined as a required array. The deleteExperiences action is defined as a required function.\r\n\r\nconst Experience = ({ experience, deleteExperience }) => {\r\n  const experiences = experience.map((exp) => (\r\n    <tr key={exp._id}>\r\n      <td>{exp.company}</td>\r\n      <td className=\"hide-sm\">{exp.title}</td>\r\n      <td>\r\n        <Moment format=\"YYYY/MM/DD\">{exp.from}</Moment> —{\" \"}\r\n        {exp.to === null ? (\r\n          \" Now\"\r\n        ) : (\r\n          <Moment format=\"YYYY/MM/DD\">{exp.from}</Moment>\r\n        )}\r\n      </td>\r\n      <td>\r\n        <button\r\n          onClick={() => deleteExperience(exp._id)}\r\n          className=\"btn btn-danger\"\r\n        >\r\n          Delete\r\n        </button>\r\n      </td>\r\n    </tr>\r\n  ));\r\n\r\n  return (\r\n    <Fragment>\r\n      <h2 className=\"my-2\">Experience Credentials</h2>\r\n      <table className=\"table\">\r\n        <thead>\r\n          <tr>\r\n            <th>Company</th>\r\n            <th className=\"hide-sm\">Title</th>\r\n            <th className=\"hide-sm\">Years</th>\r\n            <th />\r\n          </tr>\r\n        </thead>\r\n        <tbody>{experiences}</tbody>\r\n      </table>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nExperience.propTypes = {\r\n  experience: PropTypes.array.isRequired,\r\n  deleteExperience: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default connect(null, { deleteExperience })(Experience);\r\n","import React, { Fragment } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport Moment from \"react-moment\";\r\nimport { connect } from \"react-redux\";\r\nimport { deleteEducation } from \"../../actions/profile\";\r\n\r\n// Purpose:\r\n//    1) To return a table containing the user's education credentials.\r\n//    2) To provide the ability to delete specific education credentials.\r\n\r\n// How it works:\r\n//    1) The Education function takes in education and the deleteEducation action as parameters.\r\n//    2) A constant name educations is created to store the results of a map function.\r\n//    3) The map function takes in a parameter edu as the single item of each value in the education\r\n// array. The map creates a key by assigning edu._id to tr tag.\r\n//    4) Table data is added with edu.school and edu.degree.\r\n//    5) A Moment fragment is brought in using a YYYY/MM/DD format to format the edu.from and the edu.to\r\n// values. If edu.to is null based on a ternary operator check, then a sting of \" Now\" is returned instead.\r\n//    6) Lastly, for education.map function, a table data with a button that contains an onClick property\r\n// that executes an anonymous function that calls deleteEducation passing in edu._id as a parameter.\r\n//    7) The Education function returns a Fragment with a header of Education Credentials table HTML structuring\r\n// containing the table head of School, Degree, and Years. The table body is const educations passed in as JSX.\r\n//    8) The education state and deleteEducation action are defined in Education.propTypes. The educations\r\n// state is defined as a required array. The deleteEducation action is defined as a required function.\r\n\r\nconst Education = ({ education, deleteEducation }) => {\r\n  const educations = education.map((edu) => (\r\n    <tr key={edu._id}>\r\n      <td>{edu.school}</td>\r\n      <td className=\"hide-sm\">{edu.degree}</td>\r\n      <td>\r\n        <Moment format=\"YYYY/MM/DD\">{edu.from}</Moment> —{\" \"}\r\n        {edu.to === null ? (\r\n          \" Now\"\r\n        ) : (\r\n          <Moment format=\"YYYY/MM/DD\">{edu.to}</Moment>\r\n        )}\r\n      </td>\r\n      <td>\r\n        <button\r\n          onClick={() => deleteEducation(edu._id)}\r\n          className=\"btn btn-danger\"\r\n        >\r\n          Delete\r\n        </button>\r\n      </td>\r\n    </tr>\r\n  ));\r\n\r\n  return (\r\n    <Fragment>\r\n      <h2 className=\"my-2\">Education Credentials</h2>\r\n      <table className=\"table\">\r\n        <thead>\r\n          <tr>\r\n            <th>School</th>\r\n            <th className=\"hide-sm\">Degree</th>\r\n            <th className=\"hide-sm\">Years</th>\r\n            <th />\r\n          </tr>\r\n        </thead>\r\n        <tbody>{educations}</tbody>\r\n      </table>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nEducation.propTypes = {\r\n  education: PropTypes.array.isRequired,\r\n  deleteEducation: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default connect(null, { deleteEducation })(Education);\r\n","import React, { Fragment, useEffect } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { connect } from \"react-redux\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { deleteAccount, getCurrentProfile } from \"../../actions/profile\";\r\nimport Spinner from \"../layout/Spinner\";\r\nimport DashboardActions from \"./DashboardActions\";\r\nimport Experience from \"./Experience\";\r\nimport Education from \"./Education\";\r\n\r\n// Purpose:\r\n//    1) To provide a page for the user to be directed to on login, a overview of a user's profile information,\r\n// and to host the DashboardActions component.\r\n//    2) To provide a place where the user can delete their account.\r\n\r\n// How it works:\r\n//    1) The Dashboard function takes in deleteAccount, getCurrentProfile, user that is deconstructed\r\n// off of auth, profile and loading that is deconstructed off of profile as parameters.\r\n//    2) deleteAccount and getCurrentProfile are both gotten from the actions/profile folder.\r\n//    3) A useEffect hook is called that executes the getCurrentProfile action and uses the getCurrentProfile\r\n// state as its dependency.\r\n//    4) The Dashboard function returns the <Spinner /> componenent if both loading and profile are equal to\r\n// null. Else it returns a fragment.\r\n//    5) The Fragment contains a h1 tag with the page title, a p tag that uses the user param to check if\r\n// one exists and to display the user's name.\r\n//    6) A ternary operator will load either a Fragment with the DashboardActions, Experience, and Education\r\n// components. Along with a delete account button that will execute the deleteAccount action on the\r\n// triggering of onClick. If the profile state object is not null, else it will return a Fragment\r\n// with a button that will redirect the user to the /create-profile page.\r\n//    7) The getCurrentProfile action, auth state, profile state, deleteAccount action are defined in\r\n// Dashboard.propTypes. The getCurrentProfile and deleteAccount actions are defined as required functions.\r\n// The auth state and profile state are defined as required objects.\r\n//    8) auth and profile is defined in the object creating function mapStateToProps by passing in the state\r\n// object with the ability of connect from react-redux package.\r\n// auth is set to state.auth and profile is set to state.profile\r\n\r\nconst Dashboard = ({\r\n  deleteAccount,\r\n  getCurrentProfile,\r\n  auth: { user },\r\n  profile: { profile, loading },\r\n}) => {\r\n  useEffect(() => {\r\n    getCurrentProfile();\r\n  }, [getCurrentProfile]);\r\n  // Using a ternary operator to load a spinner graphic while waiting for\r\n  // loading to return back false and the profile to be loaded in\r\n  // before running the JSX within the Dashboard component.\r\n  return loading && profile === null ? (\r\n    <Spinner />\r\n  ) : (\r\n    <Fragment>\r\n      <h1 className=\"large text-primary\">Dashboard</h1>\r\n      <p className=\"lead\">\r\n        {/* user && user.name is being used to ensure user has been loaded before \r\n        putting the user's name.*/}\r\n        <i className=\"fas fa-user\"> Welcome, {user && user.name}.</i>\r\n      </p>\r\n      {profile !== null ? (\r\n        <Fragment>\r\n          <DashboardActions />\r\n          <Experience experience={profile.experience} />\r\n          <Education education={profile.education} />\r\n\r\n          <div className=\"my-2\">\r\n            <button className=\"btn btn-danger\" onClick={() => deleteAccount()}>\r\n              <i className=\"fas fa-user-minus\"></i> Delete My Account\r\n            </button>\r\n          </div>\r\n        </Fragment>\r\n      ) : (\r\n        <Fragment>\r\n          <p>You have not yet setup a profile, please add some info</p>\r\n          <Link to=\"/create-profile\" className=\"btn btn-primary my-1\">\r\n            Create Profile\r\n          </Link>\r\n        </Fragment>\r\n      )}\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nDashboard.propTypes = {\r\n  getCurrentProfile: PropTypes.func.isRequired,\r\n  auth: PropTypes.object.isRequired,\r\n  profile: PropTypes.object.isRequired,\r\n  deleteAccount: PropTypes.func.isRequired,\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n  auth: state.auth,\r\n  profile: state.profile,\r\n});\r\n\r\nexport default connect(mapStateToProps, { getCurrentProfile, deleteAccount })(\r\n  Dashboard\r\n);\r\n","import React, { Fragment, useState } from \"react\";\r\nimport { Link, withRouter } from \"react-router-dom\";\r\nimport PropTypes from \"prop-types\";\r\nimport { connect } from \"react-redux\";\r\nimport { createProfile } from \"../../actions/profile\";\r\n\r\n// Purpose:\r\n//    1) To create a form that allows a user to create a profile for the first time.\r\n\r\n// How it works:\r\n//     1) The CreateProfile function takes in createProfile action and the history prop.\r\n//     2) The CreateProfile function calls a useState hook and sets properties of company, website,\r\n// location, status, skills, githubusername, bio, twitter, facebook, linkedin, youtube, instagram to an\r\n// empty string. The useState is deconstructed to an object called formData and a function called setFormData.\r\n//     3) The CreateProfile function calls another useState hook passing in false and deconstructs a boolean\r\n// called toDateDisabled and a function named toggleDisabled off of the useState.\r\n//     4) The following constants are deconstructed off of the formData object: company, website, location,\r\n// status, skills, githubusername, bio, twitter, facebook, linkedin, youtube, instagram.\r\n//     5) A onChange function is defined passing in e (the event object) that returns setFormData calling it\r\n// with the following parameters: the entire state of formData and the Key-Value pair e.target.name: e.target.value\r\n// inside of an object.\r\n//     6) The CreateProfile function returns a Fragment that contains h1 tag saying Create Your Profile, a p tag\r\n// saying Let's get some information to make your profile stand out, a small tag saying * = required field, and\r\n// a form tag.\r\n//     7) The form tag contains a select tag that has the following options: * Select Professional Status (shown\r\n// by default), Developer, Junior Developer, Senior Developer, Manager, Student or Learning, Instructor or Teacher,\r\n// Intern, Other. The value attribute of the select tag is set to the status constant. The onChange attribute of\r\n// the select tag is set to an anonymous function that passes in e and calls the onChange function.\r\n//     8) The form tag contains a div tag that contains inputs for company, website, location, skills, githubusername,\r\n// bio. All inputs have an onChange attribute that calls the onChange function; with the website input having its\r\n// value set to the urlToRender function passing in website as a parameter. Underneath the inputs is a button tag\r\n// with an onClick attribute assigned to an anonymous function that calls a function called toggleSocialInputs and\r\n// passing in !displaySocialInputs (meaning whatever the opposite value of the current state of displaySocialInputs),\r\n// effectively making it into a toggle button for showing or hiding the social media input fields.\r\n//     9) A JSX element checks displaySocialInputs, and if it contains a truth value, it will return a Fragment containing\r\n// input fields for twitter, facebook, youtube, linkedin, instagram. All of their values are set to constants with\r\n// the same as their name attribute and onChange attributes are set to anonymous functions that call onChange function.\r\n// Also, a Link fragment that will take a user to the dashboard route. Lastly, an input tag with the type of\r\n// submit that once clicked will trigger the onSubmit property on the form.\r\n//    10) The createProfile action is defined as a required function in CreateProfile.propTypes.\r\n\r\nconst urlToRender = (link) => {\r\n  if (!link.match(/^[a-zA-Z]+:\\/\\//)) {\r\n    return \"//\" + link;\r\n  }\r\n  return link;\r\n};\r\n\r\nconst CreateProfile = ({ createProfile, history }) => {\r\n  const [formData, setFormData] = useState({\r\n    company: \"\",\r\n    website: \"\",\r\n    location: \"\",\r\n    status: \"\",\r\n    skills: \"\",\r\n    githubusername: \"\",\r\n    bio: \"\",\r\n    twitter: \"\",\r\n    facebook: \"\",\r\n    linkedin: \"\",\r\n    youtube: \"\",\r\n    instagram: \"\",\r\n  });\r\n\r\n  const [displaySocialInputs, toggleSocialInputs] = useState(false);\r\n\r\n  const {\r\n    company,\r\n    website,\r\n    location,\r\n    status,\r\n    skills,\r\n    githubusername,\r\n    bio,\r\n    twitter,\r\n    facebook,\r\n    linkedin,\r\n    youtube,\r\n    instagram,\r\n  } = formData;\r\n\r\n  const onChange = (e) =>\r\n    setFormData({ ...formData, [e.target.name]: e.target.value });\r\n\r\n  const onSubmit = (e) => {\r\n    e.preventDefault();\r\n    createProfile(formData, history);\r\n  };\r\n  return (\r\n    <Fragment>\r\n      <h1 className=\"large text-primary\">Create Your Profile</h1>\r\n      <p className=\"lead\">\r\n        <i className=\"fas fa-user\">\r\n          {\" \"}\r\n          Let's get some information to make your profile stand out\r\n        </i>\r\n      </p>\r\n      <small>* = required field</small>\r\n      <form className=\"form\" onSubmit={(e) => onSubmit(e)}>\r\n        <div className=\"form-group\">\r\n          <select name=\"status\" value={status} onChange={(e) => onChange(e)}>\r\n            <option value=\"0\">* Select Professional Status</option>\r\n            <option value=\"Developer\">Developer</option>\r\n            <option value=\"Junior Developer\">Junior Developer</option>\r\n            <option value=\"Senior Developer\">Senior Developer</option>\r\n            <option value=\"Manager\">Manager</option>\r\n            <option value=\"Student or Learning\">Student or Learning</option>\r\n            <option value=\"Instructor\">Instructor or Teacher</option>\r\n            <option value=\"Intern\">Intern</option>\r\n            <option value=\"Other\">Other</option>\r\n          </select>\r\n          <small className=\"form-text\">\r\n            Give us an idea of where you are at in your career\r\n          </small>\r\n        </div>\r\n        <div className=\"form-group\">\r\n          <input\r\n            type=\"text\"\r\n            placeholder=\"Company\"\r\n            name=\"company\"\r\n            value={company}\r\n            onChange={(e) => onChange(e)}\r\n          />\r\n          <small className=\"form-text\">\r\n            Could be your own company or one you work for\r\n          </small>\r\n        </div>\r\n        <div className=\"form-group\">\r\n          <input\r\n            type=\"text\"\r\n            placeholder=\"Website\"\r\n            name=\"website\"\r\n            value={urlToRender(website)}\r\n            onChange={(e) => onChange(e)}\r\n          />\r\n          <small className=\"form-text\">\r\n            Could be your own or a company website\r\n          </small>\r\n        </div>\r\n        <div className=\"form-group\">\r\n          <input\r\n            type=\"text\"\r\n            placeholder=\"Location\"\r\n            name=\"location\"\r\n            value={location}\r\n            onChange={(e) => onChange(e)}\r\n          />\r\n          <small className=\"form-text\">\r\n            City & state suggested (eg. Boston, MA)\r\n          </small>\r\n        </div>\r\n        <div className=\"form-group\">\r\n          <input\r\n            type=\"text\"\r\n            placeholder=\"* Skills\"\r\n            name=\"skills\"\r\n            value={skills}\r\n            onChange={(e) => onChange(e)}\r\n          />\r\n          <small className=\"form-text\">\r\n            Please use comma separated values (eg. HTML,CSS,JavaScript,PHP)\r\n          </small>\r\n        </div>\r\n        <div className=\"form-group\">\r\n          <input\r\n            type=\"text\"\r\n            placeholder=\"Github Username\"\r\n            name=\"githubusername\"\r\n            value={githubusername}\r\n            onChange={(e) => onChange(e)}\r\n          />\r\n          <small className=\"form-text\">\r\n            If you want your latest repos and a Github link, include your\r\n            username\r\n          </small>\r\n        </div>\r\n        <div className=\"form-group\">\r\n          <textarea\r\n            placeholder=\"A short bio of yourself\"\r\n            name=\"bio\"\r\n            value={bio}\r\n            onChange={(e) => onChange(e)}\r\n          ></textarea>\r\n          <small className=\"form-text\">Tell us a little about yourself</small>\r\n        </div>\r\n\r\n        <div className=\"my-2\">\r\n          <button\r\n            onClick={() => toggleSocialInputs(!displaySocialInputs)}\r\n            type=\"button\"\r\n            className=\"btn btn-light\"\r\n          >\r\n            Add Social Network Links\r\n          </button>\r\n          <span>Optional</span>\r\n        </div>\r\n\r\n        {displaySocialInputs && (\r\n          <Fragment>\r\n            <div className=\"form-group social-input\">\r\n              <i className=\"fab fa-twitter fa-2x\"></i>\r\n              <input\r\n                type=\"text\"\r\n                placeholder=\"Twitter URL\"\r\n                name=\"twitter\"\r\n                value={twitter}\r\n                onChange={(e) => onChange(e)}\r\n              />\r\n            </div>\r\n\r\n            <div className=\"form-group social-input\">\r\n              <i className=\"fab fa-facebook fa-2x\"></i>\r\n              <input\r\n                type=\"text\"\r\n                placeholder=\"Facebook URL\"\r\n                name=\"facebook\"\r\n                value={facebook}\r\n                onChange={(e) => onChange(e)}\r\n              />\r\n            </div>\r\n\r\n            <div className=\"form-group social-input\">\r\n              <i className=\"fab fa-youtube fa-2x\"></i>\r\n              <input\r\n                type=\"text\"\r\n                placeholder=\"YouTube URL\"\r\n                name=\"youtube\"\r\n                value={youtube}\r\n                onChange={(e) => onChange(e)}\r\n              />\r\n            </div>\r\n\r\n            <div className=\"form-group social-input\">\r\n              <i className=\"fab fa-linkedin fa-2x\"></i>\r\n              <input\r\n                type=\"text\"\r\n                placeholder=\"Linkedin URL\"\r\n                name=\"linkedin\"\r\n                value={linkedin}\r\n                onChange={(e) => onChange(e)}\r\n              />\r\n            </div>\r\n\r\n            <div className=\"form-group social-input\">\r\n              <i className=\"fab fa-instagram fa-2x\"></i>\r\n              <input\r\n                type=\"text\"\r\n                placeholder=\"Instagram URL\"\r\n                name=\"instagram\"\r\n                value={instagram}\r\n                onChange={(e) => onChange(e)}\r\n              />\r\n            </div>\r\n          </Fragment>\r\n        )}\r\n\r\n        <input type=\"submit\" className=\"btn btn-primary my-1\" />\r\n        <Link className=\"btn btn-light my-1\" to=\"/dashboard\">\r\n          Go Back\r\n        </Link>\r\n      </form>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nCreateProfile.propTypes = {\r\n  createProfile: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default connect(null, { createProfile })(withRouter(CreateProfile));\r\n","import React, { Fragment, useState, useEffect } from \"react\";\r\nimport { Link, withRouter } from \"react-router-dom\";\r\nimport PropTypes from \"prop-types\";\r\nimport { connect } from \"react-redux\";\r\nimport { createProfile, getCurrentProfile } from \"../../actions/profile\";\r\n\r\n// Purpose:\r\n//     1) To create a form that allows a user to edit an existing profile.\r\n\r\n// How it works:\r\n//     1) The EditProfile function takes in profile and loading that are deconstructed off of the profile\r\n// state, createProfile and getCurrentProfile actions, and the history prop.\r\n//     2) The EditProfile function calls a useState hook passing in false and deconstructs a boolean\r\n// called toDateDisabled and a function named toggleDisabled off of the useState.\r\n//     3) The EditProfile function calls a useEffect hook that calls the getCurrentProfile action that updates\r\n// the profile state. We then call setFormData to set the formData. If the following state is loading or the\r\n// property on the profile object does not exist we are then setting the property to an empty string,\r\n// else we are setting the property to what we find on the profile state. The useState hook has loading\r\n// and getCurrentProfile as dependencies.\r\n//     4) The following constants are deconstructed off of the formData object: company, website, location,\r\n// status, skills, githubusername, bio, twitter, facebook, linkedin, youtube, instagram.\r\n//     5) A onChange function is defined passing in e (the event object) that returns setFormData calling it\r\n// with the following parameters: the entire state of formData and the Key-Value pair e.target.name: e.target.value\r\n// inside of an object.\r\n//     6) The EditProfile function returns a Fragment that contains h1 tag saying Edit Your Profile, a p tag\r\n// saying Let's get some information to make your profile stand out, a small tag saying * = required field, and\r\n// a form tag.\r\n//     7) The form tag contains a select tag that has the following options: * Select Professional Status (shown\r\n// by default), Developer, Junior Developer, Senior Developer, Manager, Student or Learning, Instructor or Teacher,\r\n// Intern, Other. The value attribute of the select tag is set to the status constant. The onChange attribute of\r\n// the select tag is set to an anonymous function that passes in e and calls the onChange function.\r\n//     8) The form tag contains a div tag that contains inputs for company, website, location, skills, githubusername,\r\n// bio. All inputs have an onChange attribute that calls the onChange function; with the website input having its\r\n// value set to the urlToRender function passing in website as a parameter. Underneath the inputs is a button tag\r\n// with an onClick attribute assigned to an anonymous function that calls a function called toggleSocialInputs and\r\n// passing in !displaySocialInputs (meaning whatever the opposite value of the current state of displaySocialInputs),\r\n// effectively making it into a toggle button for showing or hiding the social media input fields.\r\n//     9) A JSX element checks displaySocialInputs, and if it contains a truth value, it will return a Fragment containing\r\n// input fields for twitter, facebook, youtube, linkedin, instagram. All of their values are set to constants with\r\n// the same as their name attribute and onChange attributes are set to anonymous functions that call onChange function.\r\n// Also, a Link fragment that will take a user to the dashboard route. Lastly, an input tag with the type of\r\n// submit that once clicked will trigger the onSubmit property on the form.\r\n//     10) The createProfile and getCurrentProfile actions are defined as a required function in EditProfile.propTypes.\r\n// The profile state is defined as required object. mapStateToProps defines profile using state.profile and auth using\r\n// state.auth.\r\n\r\nconst urlToRender = (link) => {\r\n  if (!link.match(/^[a-zA-Z]+:\\/\\//)) {\r\n    return \"//\" + link;\r\n  }\r\n  return link;\r\n};\r\n\r\nconst EditProfile = ({\r\n  profile: { profile, loading },\r\n  createProfile,\r\n  getCurrentProfile,\r\n  history,\r\n}) => {\r\n  const [formData, setFormData] = useState({\r\n    company: \"\",\r\n    website: \"\",\r\n    location: \"\",\r\n    status: \"\",\r\n    skills: \"\",\r\n    githubusername: \"\",\r\n    bio: \"\",\r\n    twitter: \"\",\r\n    facebook: \"\",\r\n    linkedin: \"\",\r\n    youtube: \"\",\r\n    instagram: \"\",\r\n  });\r\n\r\n  const [displaySocialInputs, toggleSocialInputs] = useState(false);\r\n\r\n  useEffect(() => {\r\n    getCurrentProfile();\r\n    // Filling the form with the current data.\r\n    //* If it is loading or the property on the profile object doesn't exist\r\n    //* we are then setting the property to an empty string,\r\n    //* else we are setting the property to what we find on the profile state.\r\n    setFormData({\r\n      company: loading || !profile.company ? \"\" : profile.company,\r\n      website: loading || !profile.website ? \"\" : profile.website,\r\n      location: loading || !profile.location ? \"\" : profile.location,\r\n      status: loading || !profile.status ? \"\" : profile.status,\r\n      skills: loading || !profile.skills ? \"\" : profile.skills.join(\",\"),\r\n      githubusername:\r\n        loading || !profile.githubusername ? \"\" : profile.githubusername,\r\n      bio: loading || !profile.bio ? \"\" : profile.bio,\r\n      twitter: loading || !profile.social ? \"\" : profile.social.twitter,\r\n      facebook: loading || !profile.social ? \"\" : profile.social.facebook,\r\n      linkedin: loading || !profile.social ? \"\" : profile.social.linkedin,\r\n      youtube: loading || !profile.social ? \"\" : profile.social.youtube,\r\n      instagram: loading || !profile.social ? \"\" : profile.social.instagram,\r\n    });\r\n  }, [loading, getCurrentProfile]); // Depends on loading state to decide when to useEffect.\r\n  const {\r\n    company,\r\n    website,\r\n    location,\r\n    status,\r\n    skills,\r\n    githubusername,\r\n    bio,\r\n    twitter,\r\n    facebook,\r\n    linkedin,\r\n    youtube,\r\n    instagram,\r\n  } = formData;\r\n\r\n  const onChange = (e) =>\r\n    setFormData({ ...formData, [e.target.name]: e.target.value });\r\n\r\n  const onSubmit = (e) => {\r\n    e.preventDefault();\r\n    createProfile(formData, history, true);\r\n  };\r\n  return (\r\n    <Fragment>\r\n      <h1 className=\"large text-primary\">Edit Your Profile</h1>\r\n      <p className=\"lead\">\r\n        <i className=\"fas fa-user\">\r\n          {\" \"}\r\n          Let's get some information to make your profile stand out\r\n        </i>\r\n      </p>\r\n      <small>* = required field</small>\r\n      <form className=\"form\" onSubmit={(e) => onSubmit(e)}>\r\n        <div className=\"form-group\">\r\n          <select name=\"status\" value={status} onChange={(e) => onChange(e)}>\r\n            <option value=\"0\">* Select Professional Status</option>\r\n            <option value=\"Developer\">Developer</option>\r\n            <option value=\"Junior Developer\">Junior Developer</option>\r\n            <option value=\"Senior Developer\">Senior Developer</option>\r\n            <option value=\"Manager\">Manager</option>\r\n            <option value=\"Student or Learning\">Student or Learning</option>\r\n            <option value=\"Instructor\">Instructor or Teacher</option>\r\n            <option value=\"Intern\">Intern</option>\r\n            <option value=\"Other\">Other</option>\r\n          </select>\r\n          <small className=\"form-text\">\r\n            Give us an idea of where you are at in your career\r\n          </small>\r\n        </div>\r\n        <div className=\"form-group\">\r\n          <input\r\n            type=\"text\"\r\n            placeholder=\"Company\"\r\n            name=\"company\"\r\n            value={company}\r\n            onChange={(e) => onChange(e)}\r\n          />\r\n          <small className=\"form-text\">\r\n            Could be your own company or one you work for\r\n          </small>\r\n        </div>\r\n        <div className=\"form-group\">\r\n          <input\r\n            type=\"text\"\r\n            placeholder=\"Website\"\r\n            name=\"website\"\r\n            value={urlToRender(website)}\r\n            onChange={(e) => onChange(e)}\r\n          />\r\n          <small className=\"form-text\">\r\n            Could be your own or a company website\r\n          </small>\r\n        </div>\r\n        <div className=\"form-group\">\r\n          <input\r\n            type=\"text\"\r\n            placeholder=\"Location\"\r\n            name=\"location\"\r\n            value={location}\r\n            onChange={(e) => onChange(e)}\r\n          />\r\n          <small className=\"form-text\">\r\n            City & state suggested (eg. Boston, MA)\r\n          </small>\r\n        </div>\r\n        <div className=\"form-group\">\r\n          <input\r\n            type=\"text\"\r\n            placeholder=\"* Skills\"\r\n            name=\"skills\"\r\n            value={skills}\r\n            onChange={(e) => onChange(e)}\r\n          />\r\n          <small className=\"form-text\">\r\n            Please use comma separated values (eg. HTML,CSS,JavaScript,PHP)\r\n          </small>\r\n        </div>\r\n        <div className=\"form-group\">\r\n          <input\r\n            type=\"text\"\r\n            placeholder=\"Github Username\"\r\n            name=\"githubusername\"\r\n            value={githubusername}\r\n            onChange={(e) => onChange(e)}\r\n          />\r\n          <small className=\"form-text\">\r\n            If you want your latest repos and a Github link, include your\r\n            username\r\n          </small>\r\n        </div>\r\n        <div className=\"form-group\">\r\n          <textarea\r\n            placeholder=\"A short bio of yourself\"\r\n            name=\"bio\"\r\n            value={bio}\r\n            onChange={(e) => onChange(e)}\r\n          ></textarea>\r\n          <small className=\"form-text\">Tell us a little about yourself</small>\r\n        </div>\r\n\r\n        <div className=\"my-2\">\r\n          <button\r\n            onClick={() => toggleSocialInputs(!displaySocialInputs)}\r\n            type=\"button\"\r\n            className=\"btn btn-light\"\r\n          >\r\n            Add Social Network Links\r\n          </button>\r\n          <span>Optional</span>\r\n        </div>\r\n\r\n        {displaySocialInputs && (\r\n          <Fragment>\r\n            <div className=\"form-group social-input\">\r\n              <i className=\"fab fa-twitter fa-2x\"></i>\r\n              <input\r\n                type=\"text\"\r\n                placeholder=\"Twitter URL\"\r\n                name=\"twitter\"\r\n                value={twitter}\r\n                onChange={(e) => onChange(e)}\r\n              />\r\n            </div>\r\n\r\n            <div className=\"form-group social-input\">\r\n              <i className=\"fab fa-facebook fa-2x\"></i>\r\n              <input\r\n                type=\"text\"\r\n                placeholder=\"Facebook URL\"\r\n                name=\"facebook\"\r\n                value={facebook}\r\n                onChange={(e) => onChange(e)}\r\n              />\r\n            </div>\r\n\r\n            <div className=\"form-group social-input\">\r\n              <i className=\"fab fa-youtube fa-2x\"></i>\r\n              <input\r\n                type=\"text\"\r\n                placeholder=\"YouTube URL\"\r\n                name=\"youtube\"\r\n                value={youtube}\r\n                onChange={(e) => onChange(e)}\r\n              />\r\n            </div>\r\n\r\n            <div className=\"form-group social-input\">\r\n              <i className=\"fab fa-linkedin fa-2x\"></i>\r\n              <input\r\n                type=\"text\"\r\n                placeholder=\"Linkedin URL\"\r\n                name=\"linkedin\"\r\n                value={linkedin}\r\n                onChange={(e) => onChange(e)}\r\n              />\r\n            </div>\r\n\r\n            <div className=\"form-group social-input\">\r\n              <i className=\"fab fa-instagram fa-2x\"></i>\r\n              <input\r\n                type=\"text\"\r\n                placeholder=\"Instagram URL\"\r\n                name=\"instagram\"\r\n                value={instagram}\r\n                onChange={(e) => onChange(e)}\r\n              />\r\n            </div>\r\n          </Fragment>\r\n        )}\r\n\r\n        <input type=\"submit\" className=\"btn btn-primary my-1\" />\r\n        <Link className=\"btn btn-light my-1\" to=\"/dashboard\">\r\n          Go Back\r\n        </Link>\r\n      </form>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nEditProfile.propTypes = {\r\n  createProfile: PropTypes.func.isRequired,\r\n  getCurrentProfile: PropTypes.func.isRequired,\r\n  profile: PropTypes.object.isRequired,\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n  profile: state.profile,\r\n});\r\n\r\nexport default connect(mapStateToProps, { createProfile, getCurrentProfile })(\r\n  withRouter(EditProfile)\r\n);\r\n","import React, { Fragment, useState } from \"react\";\r\nimport { Link, withRouter } from \"react-router-dom\";\r\nimport PropTypes from \"prop-types\";\r\nimport { connect } from \"react-redux\";\r\nimport { addExperience } from \"../../actions/profile\";\r\n\r\n// Purpose:\r\n//    1) To create a form that provides a user with the ability to add work experience.\r\n\r\n// How it works:\r\n//    1) The AddExperience function takes in addExperience action and the history prop.\r\n//    2) The AddExperience function calls a useState hook and sets properties of company, title, location,\r\n// from, to, and description to an empty string, and sets current to false. The useState is deconstructed to\r\n// an object called formData and function called setFormData.\r\n//    3) The AddExperience function calls another useState hook passing in false and deconstructs a boolean\r\n// called toDateDisabled and a function named toggleDisabled off of the useState.\r\n//    4) The following constants are deconstructed off of the formData object: company, title, location,\r\n// from, to, current, and description.\r\n//    5) A onChange function is defined passing in e (the event object) that returns setFormData calling it\r\n// with the following parameters: the entire state of formData and the Key-Value pair e.target.name: e.target.value\r\n// inside of an object.\r\n//    6) The AddExperience function returns a Fragment that contains a h1 tag saying Add An Experience, a p tag\r\n// saying Add any developer/programming positions that you have had in the past, a small tag saying * = required field,\r\n// a form tag that contains inputs for title, company, location, from, current, to, and a textarea for description.\r\n// Also, a Link fragment that will take a user to the dashboard route. Lastly, an input tag with the type of\r\n// submit that once clicked will trigger the onSubmit property on form.\r\n//   7) When the form is submitted, the onSubmit property calls an anonymous function that passes in e,\r\n// preventsDefault, and executes the addExperience action with the parameters formData and history.\r\n//   8) The addExperience action is defined as a required function in AddExperience.propTypes.\r\n\r\nconst AddExperience = ({ addExperience, history }) => {\r\n  const [formData, setFormData] = useState({\r\n    company: \"\",\r\n    title: \"\",\r\n    location: \"\",\r\n    from: \"\",\r\n    to: \"\",\r\n    current: false,\r\n    description: \"\",\r\n  });\r\n\r\n  const [toDateDisabled, toggleDisabled] = useState(false);\r\n\r\n  const { company, title, location, from, to, current, description } = formData;\r\n\r\n  const onChange = (e) =>\r\n    setFormData({ ...formData, [e.target.name]: e.target.value });\r\n\r\n  return (\r\n    <Fragment>\r\n      <h1 class=\"large text-primary\">Add An Experience</h1>\r\n      <p class=\"lead\">\r\n        <i class=\"fas fa-code-branch\"></i> Add any developer/programming\r\n        positions that you have had in the past\r\n      </p>\r\n      <small>* = required field</small>\r\n      <form\r\n        class=\"form\"\r\n        onSubmit={(e) => {\r\n          e.preventDefault();\r\n          addExperience(formData, history);\r\n        }}\r\n      >\r\n        <div class=\"form-group\">\r\n          <input\r\n            type=\"text\"\r\n            placeholder=\"* Job Title\"\r\n            name=\"title\"\r\n            value={title}\r\n            onChange={(e) => onChange(e)}\r\n            required\r\n          />\r\n        </div>\r\n        <div class=\"form-group\">\r\n          <input\r\n            type=\"text\"\r\n            placeholder=\"* Company\"\r\n            name=\"company\"\r\n            value={company}\r\n            onChange={(e) => onChange(e)}\r\n            required\r\n          />\r\n        </div>\r\n        <div class=\"form-group\">\r\n          <input\r\n            type=\"text\"\r\n            placeholder=\"Location\"\r\n            name=\"location\"\r\n            value={location}\r\n            onChange={(e) => onChange(e)}\r\n          />\r\n        </div>\r\n        <div class=\"form-group\">\r\n          <h4>From Date</h4>\r\n          <input\r\n            type=\"date\"\r\n            name=\"from\"\r\n            value={from}\r\n            onChange={(e) => onChange(e)}\r\n          />\r\n        </div>\r\n        <div class=\"form-group\">\r\n          <p>\r\n            <input\r\n              type=\"checkbox\"\r\n              name=\"current\"\r\n              checked={current}\r\n              value={current}\r\n              onChange={(e) => {\r\n                setFormData({ ...formData, current: !current });\r\n                toggleDisabled(!toDateDisabled);\r\n              }}\r\n            />{\" \"}\r\n            Current Job\r\n          </p>\r\n        </div>\r\n        <div class=\"form-group\">\r\n          <h4>To Date</h4>\r\n          <input\r\n            type=\"date\"\r\n            name=\"to\"\r\n            value={to}\r\n            onChange={(e) => onChange(e)}\r\n            disabled={toDateDisabled ? \"disabled\" : \"\"}\r\n          />\r\n        </div>\r\n        <div class=\"form-group\">\r\n          <textarea\r\n            name=\"description\"\r\n            cols=\"30\"\r\n            rows=\"5\"\r\n            placeholder=\"Job Description\"\r\n            value={description}\r\n            onChange={(e) => onChange(e)}\r\n          ></textarea>\r\n        </div>\r\n        <input type=\"submit\" class=\"btn btn-primary my-1\" />\r\n        <Link class=\"btn btn-light my-1\" to=\"/dashboard\">\r\n          Go Back\r\n        </Link>\r\n      </form>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nAddExperience.propTypes = {\r\n  addExperience: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default connect(null, { addExperience })(withRouter(AddExperience));\r\n","import React, { Fragment, useState } from \"react\";\r\nimport { Link, withRouter } from \"react-router-dom\";\r\nimport PropTypes from \"prop-types\";\r\nimport { connect } from \"react-redux\";\r\nimport { addEducation } from \"../../actions/profile\";\r\n\r\n// Purpose:\r\n//    1) To create a form that provides a user with the ability to add education credentials.\r\n\r\n// How it works:\r\n//    1) The AddEducation function takes in addEducation action and the history prop.\r\n//    2) The AddEducation function calls a useState hook and sets properties of school, degree, fieldofstudy,\r\n// from, to, and description to a empty string, and sets current to false. The useState is deconstructed to\r\n// an object called formData and function called setFormData.\r\n//    3) The AddEducation function calls another useState hook passing in false and deconstructs a boolean\r\n// called toDateDisabled and a function named toggleDisabled off of the useState.\r\n//    4) The following constants are deconstructed off of the formData object: school, degree, fieldofstudy,\r\n// from, to, current, and description.\r\n//    5) A onChange function is defined passing in e (the event object) that returns setFormData calling it\r\n// with the following parameters: the entire state of formData and the Key-Value pair e.target.name: e.target.value\r\n// inside of an object.\r\n//    6) The AddEducation function returns a Fragment that contains a h1 tag saying Add An Education, a p tag\r\n// saying Add any school or bootcamp that you have attended, a small tag saying * = required field, a form tag\r\n// that contains inputs for school, degree, fieldofstudy, from, current, to, and a textarea for description.\r\n// Also, a Link fragment that will take a user to the dashboard route. Lastly, an input tag with the type of\r\n// submit that once clicked will trigger the onSubmit property on form.\r\n//   7) When the form is submitted, the onSubmit property calls an anonymous function that passes in e,\r\n// preventsDefault, and executes the addEducation action with the parameters formData and history.\r\n//   8) The addEducation action is defined as a required function in AddEducation.propTypes.\r\n\r\nconst AddEducation = ({ addEducation, history }) => {\r\n  const [formData, setFormData] = useState({\r\n    school: \"\",\r\n    degree: \"\",\r\n    fieldofstudy: \"\",\r\n    from: \"\",\r\n    to: \"\",\r\n    current: false,\r\n    description: \"\",\r\n  });\r\n\r\n  const [toDateDisabled, toggleDisabled] = useState(false);\r\n\r\n  const {\r\n    school,\r\n    degree,\r\n    fieldofstudy,\r\n    from,\r\n    to,\r\n    current,\r\n    description,\r\n  } = formData;\r\n\r\n  const onChange = (e) =>\r\n    setFormData({ ...formData, [e.target.name]: e.target.value });\r\n\r\n  return (\r\n    <Fragment>\r\n      <h1 class=\"large text-primary\">Add An Education</h1>\r\n      <p class=\"lead\">\r\n        <i class=\"fas fa-code-branch\"></i> Add any school or bootcamp that you\r\n        have attended\r\n      </p>\r\n      <small>* = required field</small>\r\n      <form\r\n        class=\"form\"\r\n        onSubmit={(e) => {\r\n          e.preventDefault();\r\n          addEducation(formData, history);\r\n        }}\r\n      >\r\n        <div class=\"form-group\">\r\n          <input\r\n            type=\"text\"\r\n            placeholder=\"* School or Bootcamp\"\r\n            name=\"school\"\r\n            value={school}\r\n            onChange={(e) => onChange(e)}\r\n            required\r\n          />\r\n        </div>\r\n        <div class=\"form-group\">\r\n          <input\r\n            type=\"text\"\r\n            placeholder=\"* Degree or Certificate\"\r\n            name=\"degree\"\r\n            value={degree}\r\n            onChange={(e) => onChange(e)}\r\n            required\r\n          />\r\n        </div>\r\n        <div class=\"form-group\">\r\n          <input\r\n            type=\"text\"\r\n            placeholder=\"Field of Study\"\r\n            name=\"fieldofstudy\"\r\n            value={fieldofstudy}\r\n            onChange={(e) => onChange(e)}\r\n          />\r\n        </div>\r\n        <div class=\"form-group\">\r\n          <h4>From Date</h4>\r\n          <input\r\n            type=\"date\"\r\n            name=\"from\"\r\n            value={from}\r\n            onChange={(e) => onChange(e)}\r\n          />\r\n        </div>\r\n        <div class=\"form-group\">\r\n          <p>\r\n            <input\r\n              type=\"checkbox\"\r\n              name=\"current\"\r\n              checked={current}\r\n              value={current}\r\n              onChange={(e) => {\r\n                setFormData({ ...formData, current: !current });\r\n                toggleDisabled(!toDateDisabled);\r\n              }}\r\n            />{\" \"}\r\n            Currently Enrolled\r\n          </p>\r\n        </div>\r\n        <div class=\"form-group\">\r\n          <h4>To Date</h4>\r\n          <input\r\n            type=\"date\"\r\n            name=\"to\"\r\n            value={to}\r\n            onChange={(e) => onChange(e)}\r\n            disabled={toDateDisabled ? \"disabled\" : \"\"}\r\n          />\r\n        </div>\r\n        <div class=\"form-group\">\r\n          <textarea\r\n            name=\"description\"\r\n            cols=\"30\"\r\n            rows=\"5\"\r\n            placeholder=\"Program Description\"\r\n            value={description}\r\n            onChange={(e) => onChange(e)}\r\n          ></textarea>\r\n        </div>\r\n        <input type=\"submit\" class=\"btn btn-primary my-1\" />\r\n        <Link class=\"btn btn-light my-1\" to=\"/dashboard\">\r\n          Go Back\r\n        </Link>\r\n      </form>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nAddEducation.propTypes = {\r\n  addEducation: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default connect(null, { addEducation })(withRouter(AddEducation));\r\n","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport PropTypes from \"prop-types\";\r\n\r\n// Purpose:\r\n//    1) To display a snippet of a single user's profile and provide a link to view their profile in full detail.\r\n\r\n// How it works:\r\n//    1) The ProfileItem function takes in user, status, company, location, skills, that is deconstructed off of\r\n// the profile prop. The user object is deconstructed further to _id, name, avatar.\r\n//    2) The ProfileItem function returns a div containing an image with the src attribute assigned to the\r\n// value of avatar, h2 tag with the value of name inside, p tag with the value of status and a JSX\r\n// expression that checks for a truth value of company; if true, then displays the value of company\r\n// in a span tag. A p tag using a JSX expression that checks for a truth value of location, if true, then\r\n// displays the value of location in a span tag.\r\n//    3) The Link fragment provides a link to the users profile by linking to `/profile/:_id` where\r\n// :_id equals the value of _id brought in from the deconstructed state of profile.user.\r\n//    4) A ul tag contains a JSX expression that uses the slice method on the skills array to return the\r\n// first four skills from the array. Once we have this new array we map through it using the map method\r\n// passing in a single instance, skill, and index. The map returns an li tag with the attribute key set\r\n// to the passed in index value and inside containing the value of the single instance, skill.\r\n//    5) The profile prop is defined as a required object in ProfileItem.propTypes.\r\n\r\nconst ProfileItem = ({\r\n  profile: {\r\n    user: { _id, name, avatar },\r\n    status,\r\n    company,\r\n    location,\r\n    skills,\r\n  },\r\n}) => {\r\n  return (\r\n    <div className=\"profile bg-light\">\r\n      <img src={avatar} alt=\"\" className=\"round-img\" />\r\n      <div>\r\n        <h2>{name}</h2>\r\n        <p>\r\n          {status} {company && <span> at {company}</span>}\r\n        </p>\r\n        <p className=\"my-1\">{location && <span>{location}</span>}</p>\r\n        <Link to={`/profile/${_id}`} className=\"btn btn-primary\">\r\n          View Profile\r\n        </Link>\r\n      </div>\r\n      <ul>\r\n        {/* Returning the first four skills from the array, we use the index parameter as the key. */}\r\n        {skills.slice(0, 4).map((skill, index) => (\r\n          <li key={index} className=\"text-primary\">\r\n            <i className=\"fas fa-check\"></i> {skill}\r\n          </li>\r\n        ))}\r\n      </ul>\r\n    </div>\r\n  );\r\n};\r\n\r\nProfileItem.propTypes = {\r\n  profile: PropTypes.object.isRequired,\r\n};\r\n\r\nexport default ProfileItem;\r\n","import React, { Fragment, useEffect } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { connect } from \"react-redux\";\r\nimport Spinner from \"../layout/Spinner\";\r\nimport ProfileItem from \"./ProfileItem\";\r\nimport { getProfiles } from \"../../actions/profile\";\r\n\r\n// Purpose:\r\n//    1) To display all the registered users with a profile.\r\n\r\n// How it works:\r\n//    1) The Profiles function takes in getProfiles action, profile and loading that is deconstructed off\r\n// of the profile state.\r\n//    2) The Profiles function calls a useEffect hook that calls the getProfiles action using getProfiles as\r\n// its dependency.\r\n//    3) The Profiles function returns a Fragment that will check loading and if true will return the Spinner\r\n// fragment or will return another Fragment.\r\n//    4) The Fragment returned if loading is false contains a h1 tag saying Developers, a p tag saying Browse and\r\n// connect with developers, and a div.\r\n//    5) The div uses JSX to check if profiles.length is greater than 0. If true then it will return the result\r\n// of profiles.map that takes in a single instance, profile, returning a component called ProfileItem and setting\r\n// its props key to profile._id and profile to profile. Else, if not true, it wil return an h4 tag saying No profiles\r\n// found...\r\n//    6) The getProfiles action is set as a required function and the profile state is set as a required object.\r\n//    7) mapStateToProps defines profile using state.profile.\r\n\r\nconst Profiles = ({ getProfiles, profile: { profiles, loading } }) => {\r\n  useEffect(() => {\r\n    getProfiles();\r\n  }, [getProfiles]);\r\n  return (\r\n    <Fragment>\r\n      {loading ? (\r\n        <Spinner />\r\n      ) : (\r\n        <Fragment>\r\n          <h1 className=\"large text-primary\">Developers</h1>\r\n          <p className=\"lead\">\r\n            <i className=\"fab fa-connectdevelop\"></i> Browse and connect with\r\n            developers\r\n          </p>\r\n          <div className=\"profiles\">\r\n            {profiles.length > 0 ? (\r\n              profiles.map((profile) => (\r\n                <ProfileItem key={profile._id} profile={profile} />\r\n              ))\r\n            ) : (\r\n              <h4>No profiles found...</h4>\r\n            )}\r\n          </div>\r\n        </Fragment>\r\n      )}\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nProfiles.propTypes = {\r\n  getProfiles: PropTypes.func.isRequired,\r\n  profile: PropTypes.object.isRequired,\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n  profile: state.profile,\r\n});\r\n\r\nexport default connect(mapStateToProps, { getProfiles })(Profiles);\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\n// Purpose:\r\n//    1) To display the top part of a user's profile page that contains information such as status, company,\r\n// location, website, social media links, and their profile avatar image.\r\n\r\n// How it works:\r\n//    1) The ProfileTop function takes in status, company, location, website, social, and user that is\r\n// deconstructed off of the profile prop. The user prop is further deconstructed with name and avatar.\r\n//    2) The ProfileTop function returns a div containing an image with the attribute src assigned to\r\n// the value of avatar, a h1 tag with the value of name inside, a p tag with the value of status and a JSX\r\n// expression that checks for a truth value of company; if true, then displays the value of company\r\n// in a span tag. A p tag using a JSX expression that checks for a truth value of location, if true, then\r\n// displays the value of location in a span tag.\r\n//    3) A div tag with a JSX expression will return an a tag if a truth value exists for websites. The a tag\r\n// contains a href attribute that is assigned to a function called UrlToRender that passes in the website prop.\r\n//    4) The urlToRender function takes in a parameter called link and uses regex to see if the link\r\n// does NOT match the expected input returning the formatted link.\r\n//    5) The five following a tags have a href value assigned social.twitter, social.facebook, social.linkedin,\r\n// social.youtube, social.instagram, respectively. All these a tags have a JSX conditional that check to see\r\n// if there is a truth value in the social prop object and the corresponding attached object.\r\n//    6) The profile prop is defined as a required object in ProfileTop.propTypes.\r\n\r\n// A function to return the proper formatted link if the user did not\r\n// add the necessary https:// in order for the href property to work.\r\nconst urlToRender = (link) => {\r\n  if (!link.match(/^[a-zA-Z]+:\\/\\//)) {\r\n    return \"//\" + link;\r\n  }\r\n  return link;\r\n};\r\n\r\nconst ProfileTop = ({\r\n  profile: {\r\n    status,\r\n    company,\r\n    location,\r\n    website,\r\n    social,\r\n    user: { name, avatar },\r\n  },\r\n}) => {\r\n  return (\r\n    // <!-- Top -->\r\n    <div className=\"profile-top bg-primary p-2\">\r\n      <img className=\"round-img my-1\" src={avatar} alt=\"\" />\r\n      <h1 className=\"large\">{name}</h1>\r\n      <p className=\"lead\">\r\n        {status} {company && <span> at {company}</span>}\r\n      </p>\r\n      <p>{location && <span>{location}</span>}</p>\r\n      <div className=\"icons my-1\">\r\n        {website && (\r\n          <a\r\n            href={urlToRender(website)}\r\n            target=\"_blank\"\r\n            rel=\"noopener noreferrer\"\r\n          >\r\n            <i className=\"fas fa-globe fa-2x\"></i>\r\n          </a>\r\n        )}\r\n        {social && social.twitter && (\r\n          <a href={social.twitter} target=\"_blank\" rel=\"noopener noreferrer\">\r\n            <i className=\"fab fa-twitter fa-2x\"></i>\r\n          </a>\r\n        )}\r\n        {social && social.facebook && (\r\n          <a href={social.facebook} target=\"_blank\" rel=\"noopener noreferrer\">\r\n            <i className=\"fab fa-facebook fa-2x\"></i>\r\n          </a>\r\n        )}\r\n        {social && social.linkedin && (\r\n          <a href={social.linkedin} target=\"_blank\" rel=\"noopener noreferrer\">\r\n            <i className=\"fab fa-linkedin fa-2x\"></i>\r\n          </a>\r\n        )}\r\n        {social && social.youtube && (\r\n          <a href={social.youtube} target=\"_blank\" rel=\"noopener noreferrer\">\r\n            <i className=\"fab fa-youtube fa-2x\"></i>\r\n          </a>\r\n        )}\r\n        {social && social.instagram && (\r\n          <a href={social.instagram} target=\"_blank\" rel=\"noopener noreferrer\">\r\n            <i className=\"fab fa-instagram fa-2x\"></i>\r\n          </a>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nProfileTop.propTypes = {\r\n  profile: PropTypes.object.isRequired,\r\n};\r\n\r\nexport default ProfileTop;\r\n","import React, { Fragment } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\n// Purpose:\r\n//    1) To display the user's name, bio, and skills.\r\n\r\n// How it works:\r\n//    1) The ProfileAbout function takes in bio, skills, and user that is deconstructed off of the profile\r\n// state. name is further deconstructed off of user.\r\n//    2) The ProfileAbout function returns a div containing a Fragment with an h2 tag set to the value of user's\r\n// first name (using the trim method and splitting it on the first occurence of a space to get only the first name)\r\n// and a p tag that contains the bio of that user.\r\n//    3) In a div a JSX function contains a map function attached to the skills array that takes in a single instance,\r\n// skill, and index. The map function returns a div, with the property key set to index, and contains skill value.\r\n//    4) The profile state is set to a required object in ProfileAbout.propTypes.\r\n\r\nconst ProfileAbout = ({\r\n  profile: {\r\n    bio,\r\n    skills,\r\n    user: { name },\r\n  },\r\n}) => {\r\n  return (\r\n    //   <!-- About -->\r\n    <div className=\"profile-about bg-light p-2\">\r\n      {bio && (\r\n        <Fragment>\r\n          <h2 className=\"text-primary\">{name.trim().split(\" \")[0]}'s Bio</h2>\r\n          <p>{bio}</p>\r\n        </Fragment>\r\n      )}\r\n      <h2 className=\"text-primary\">Skill Set</h2>\r\n      <div className=\"skills\">\r\n        {skills.map((skill, index) => (\r\n          <div key={index} className=\"p-1\">\r\n            <i className=\"fas fa-check\" /> {skill}\r\n          </div>\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nProfileAbout.propTypes = {\r\n  profile: PropTypes.object.isRequired,\r\n};\r\n\r\nexport default ProfileAbout;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport Moment from \"react-moment\";\r\n\r\n// Purpose:\r\n//    1) To display experience related information, such as the company, title, location,\r\n// the dates between they worked at the company, and a description of that education.\r\n\r\n// How it works:\r\n//    1) The ProfileEexperience function takes in company, title, location, current, to, from,\r\n// and description that is deconstructed off of the experience prop.\r\n//    2) The ProfileExperience function returns a div containing an h3 tag with the company name and\r\n// p tags containing the title and description that pertain to that experience.\r\n//    3) The Moment fragment is used to format the from date as YYYY/MM/DD, and a ternary operator is\r\n// used to check if there is a truth value in to, if not it will return \" Now\" else it will return\r\n// a Moment fragment with YYYY/MM/DD for to.\r\n//    4) The experience prop is defined as a required object in ProfileExperience.propTypes.\r\n\r\nconst ProfileExperience = ({\r\n  experience: { company, title, location, current, to, from, description },\r\n}) => (\r\n  <div>\r\n    <h3 className=\"text-dark\">{company}</h3>\r\n    <p>\r\n      <Moment format=\"YYYY/MM/DD\">{from}</Moment> -{\" \"}\r\n      {!to ? \" Now\" : <Moment format=\"YYYY/MM/DD\">{to}</Moment>}\r\n    </p>\r\n    <p>\r\n      <strong>Position: </strong> {title}\r\n    </p>\r\n    <p>\r\n      <strong>Description: </strong> {description}\r\n    </p>\r\n  </div>\r\n);\r\n\r\nProfileExperience.propTypes = {\r\n  experience: PropTypes.object.isRequired,\r\n};\r\n\r\nexport default ProfileExperience;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport Moment from \"react-moment\";\r\n\r\n// Purpose:\r\n//    1) To display education-related information of a user, such as the school, degree,\r\n// field of study, the dates between they earned their degree, and a description of\r\n// that education.\r\n\r\n// How it works:\r\n//    1) The ProfileEducation function takes in school, degree, fieldofstudy, current, to, from,\r\n// and description that is deconstructed off of the education prop.\r\n//    2) The ProfileEducation function returns a div containing a h3 tag with the school name and\r\n// p tags containing the degree, fieldofstudy, and description that pertain to that education.\r\n//    3) The Moment fragment is used to format the from date as YYYY/MM/DD and a ternary operator is\r\n// used to check if there is a truth value in to; if not, it will return \" Now\" else it will return\r\n// a Moment fragment with YYYY/MM/DD for to.\r\n//    4) The education prop is defined as a required object in ProfileEducation.propTypes.\r\n\r\nconst ProfileEducation = ({\r\n  education: { school, degree, fieldofstudy, current, to, from, description },\r\n}) => (\r\n  <div>\r\n    <h3 className=\"text-dark\">{school}</h3>\r\n    <p>\r\n      <Moment format=\"YYYY/MM/DD\">{from}</Moment> -{\" \"}\r\n      {!to ? \" Now\" : <Moment format=\"YYYY/MM/DD\">{to}</Moment>}\r\n    </p>\r\n    <p>\r\n      <strong>Degree: </strong> {degree}\r\n    </p>\r\n    <p>\r\n      <strong>Field of Study: </strong> {fieldofstudy}\r\n    </p>\r\n    <p>\r\n      <strong>Description: </strong> {description}\r\n    </p>\r\n  </div>\r\n);\r\n\r\nProfileEducation.propTypes = {\r\n  education: PropTypes.object.isRequired,\r\n};\r\n\r\nexport default ProfileEducation;\r\n","import React, { useEffect } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { connect } from \"react-redux\";\r\nimport Spinner from \"../layout/Spinner\";\r\nimport { getGithubRepos } from \"../../actions/profile\";\r\n\r\n// Purpose:\r\n//    1) To display five Github repos that belong to the username the user entered on their profile.\r\n//    2) To display the name, description, the stargazer count, the repo watch count, and the fork count\r\n// for each of the five repos.\r\n\r\n// How it works:\r\n//   1) The ProfileGithub function takes in username prop, the getGithubRepos action, and the repos state\r\n// as its parameters.\r\n//   2) The useEffect hook is called that executes the getGithubRepos action with username as its parameter,\r\n// using getGitHubRepos as its dependency.\r\n//    3) The ProfileGithub function returns a div that contains h2 tag saying Github Repos and either an h4 tag\r\n// saying No GitHub profile found or a div containing the five repos for that user's entered username.\r\n//    4) A map function is called on the repos array, and a single instance, repo, is passed in as a parameter.\r\n// A div is created with the property of key and given the value of repo._id, an a tag inside of a h4 tag\r\n// has a property of href with the value of repo.html_url and displays repo.name. A p tag displays repo.description.\r\n// Li tags are made for Stars, Watchers, and Forks, displaying the values of repo.stargazers_count,\r\n// repo.watchers_count, and repo.forks_count, respectively.\r\n//    5) The getGithubRepos actions is defined as a required object in ProfileGithub.propTypes. The repos state\r\n// is defined as a required array, and the username prop is defined as a required object.\r\n//    6) mapStateToProps defines repos using state.profile.repos\r\n\r\nconst ProfileGithub = ({ username, getGithubRepos, repos }) => {\r\n  useEffect(() => {\r\n    getGithubRepos(username);\r\n  }, [getGithubRepos]);\r\n  return (\r\n    <div className=\"profile-github\">\r\n      <h2 className=\"text-primary my-1\">Github Repos</h2>\r\n      {repos === null ? (\r\n        // <Spinner />\r\n        <h4>No GitHub profile found</h4>\r\n      ) : (\r\n        repos.map((repo) => (\r\n          <div key={repo._id} className=\"repo bg-white p-1 my-1\">\r\n            <div>\r\n              <h4>\r\n                <a href={repo.html_url} target=\"_blank\" rel=\"noopener norefer\">\r\n                  {repo.name}\r\n                </a>\r\n              </h4>\r\n              <p>{repo.description}</p>\r\n            </div>\r\n            <div>\r\n              <ul>\r\n                <li className=\"badge badge-primary\">\r\n                  Stars: {repo.stargazers_count}\r\n                </li>\r\n                <li className=\"badge badge-dark\">\r\n                  Watchers: {repo.watchers_count}\r\n                </li>\r\n                <li className=\"badge badge-light\">Forks: {repo.forks_count}</li>\r\n              </ul>\r\n            </div>\r\n          </div>\r\n        ))\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nProfileGithub.propTypes = {\r\n  getGithubRepos: PropTypes.func.isRequired,\r\n  repos: PropTypes.array.isRequired,\r\n  username: PropTypes.string.isRequired,\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n  repos: state.profile.repos,\r\n});\r\n\r\nexport default connect(mapStateToProps, { getGithubRepos })(ProfileGithub);\r\n","import React, { Fragment, useEffect } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { connect } from \"react-redux\";\r\nimport Spinner from \"../layout/Spinner\";\r\nimport ProfileTop from \"./ProfileTop\";\r\nimport ProfileAbout from \"./ProfileAbout\";\r\nimport ProfileExperience from \"./ProfileExperience\";\r\nimport ProfileEducation from \"./ProfileEducation\";\r\nimport ProfileGithub from \"./ProfileGithub\";\r\nimport { getProfileById } from \"../../actions/profile\";\r\n\r\n// Purpose:\r\n//    1) To display buttons that allow a user to navigate to pages to view all profiles and edit profile.\r\n//    2) To display a user's entire profile by bringing in the ProfileTop, ProfileAbout, ProfileExperience,\r\n// ProfileEducation, and ProfileGithub fragments.\r\n//\r\n// How it works:\r\n//    1) The Profile function takes in a getProfileById action, brought in from actions/profile. The Profile\r\n// function takes in profile, loading, and error state that is deconstructed off of profile, the auth state,\r\n// along with match and githubusername.\r\n//    2) In the Profile function a useEffect hook is called with an anonymous function that will execute the\r\n// getProfileById action with match.params.id as a parameter, using getProfileById and match.params.id as\r\n// its dependencies.\r\n//    3) The Profile function returns a Fragment containing either a fragment named Spinner or another\r\n// Fragment. If the profile state equals null or loading equals a truth value, the Profile function will\r\n// return Spinner, else it will return another Fragment.\r\n//    4) The fragment Profile function will return if profile does NOT equal null and loading state contains\r\n// a false value is the following: A Link fragment that takes a user to the route /profiles, a Link fragment\r\n// that takes a user to the /edit-profile route, ProfileTop, ProfileAbout, ProfileExperience, ProfileEducation,\r\n// and ProfileGithub fragments.\r\n//    5) For the Link fragment that will take a user to the /edit-profile route, the following has to happen.\r\n// First, the auth.isAuthenticated state needs to bet set to a truth value. Two, the auth.loading state needs\r\n// to equal false. Three, auth.user._id needs to equal profile.user._id, only when all three of these conditions\r\n// are met will a user be shown the Edit Profile button.\r\n//    6) The ProfileTop and ProfileAbout fragments have props named profile that is set to the profile state.\r\n//    7) For both of the fragments containing ProfileExperience and ProfileEducation to be displayed\r\n// the length of their array must be greater than 0. This array is found with profile.experience.length or\r\n// profile.education.length.\r\n//    8) Both ProfileExperience and ProfileEducation fragments are returned via a map function on the arrays\r\n// of profile.experience and profile.education. The map function takes in a single instance, experience, and\r\n// returns the fragment of ProfileExperience with the props key with the value of experience._id and experience\r\n// with the value of experience. The map function takes in a single instance, education, and returns the\r\n// fragment of ProfileEducation with the props key with the value of education._id and education with the\r\n// value of education.\r\n//    9) The ProfileGithub component will be returned if profile.githubusername state is equal to a truth value.\r\n// The ProfileGithub component takes in a prop of username with the value of profile.githubusername.\r\n//    10) The getProfileById action is defined as required function, the profile and auth state is defined as\r\n// a required object in Profile.propTypes. mapStateToProps defines profile using state.profile and auth using\r\n// state.auth.\r\n\r\nconst Profile = ({\r\n  getProfileById,\r\n  profile: { profile, loading, error },\r\n  auth,\r\n  match,\r\n  githubusername,\r\n}) => {\r\n  useEffect(() => {\r\n    // Get's the user's profile ID from the url using match.params\r\n    getProfileById(match.params.id);\r\n  }, [getProfileById, match.params.id]);\r\n  return (\r\n    <Fragment>\r\n      {profile === null || loading ? (\r\n        <Spinner />\r\n      ) : (\r\n        <Fragment>\r\n          {\" \"}\r\n          Taco salad lives here\r\n          <Link to=\"/profiles\" className=\"btn btn-light\">\r\n            Back To Profiles\r\n          </Link>\r\n          {auth.isAuthenticated &&\r\n            auth.loading === false &&\r\n            auth.user._id === profile.user._id && (\r\n              <Link to=\"/edit-profile\" className=\"btn btn-dark\">\r\n                Edit Profile\r\n              </Link>\r\n            )}\r\n          <div className=\"profile-grid my-1\">\r\n            <ProfileTop profile={profile} />\r\n            <ProfileAbout profile={profile} />\r\n            <div className=\"profile-exp bg-white p-2\">\r\n              <h2 className=\"text-primary\">Experience</h2>\r\n              {profile.experience.length > 0 ? (\r\n                <Fragment>\r\n                  {profile.experience.map((experience) => (\r\n                    <ProfileExperience\r\n                      key={experience._id}\r\n                      experience={experience}\r\n                    />\r\n                  ))}\r\n                </Fragment>\r\n              ) : (\r\n                <h4>No experience credentials</h4>\r\n              )}\r\n            </div>\r\n            <div className=\"profile-edu bg-white p-2\">\r\n              <h2 className=\"text-primary\">Education</h2>\r\n              {profile.education.length > 0 ? (\r\n                <Fragment>\r\n                  {profile.education.map((education) => (\r\n                    <ProfileEducation\r\n                      key={education._id}\r\n                      education={education}\r\n                    />\r\n                  ))}\r\n                </Fragment>\r\n              ) : (\r\n                <h4>No education credentials</h4>\r\n              )}\r\n            </div>\r\n\r\n            {profile.githubusername && (\r\n              <ProfileGithub username={profile.githubusername} />\r\n            )}\r\n          </div>\r\n        </Fragment>\r\n      )}{\" \"}\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nProfile.propTypes = {\r\n  getProfileById: PropTypes.func.isRequired,\r\n  profile: PropTypes.object.isRequired,\r\n  auth: PropTypes.object.isRequired,\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n  profile: state.profile,\r\n  auth: state.auth,\r\n});\r\n\r\nexport default connect(mapStateToProps, { getProfileById })(Profile);\r\n","import React, { Fragment } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { Link } from \"react-router-dom\";\r\nimport Moment from \"react-moment\";\r\nimport { connect } from \"react-redux\";\r\nimport { addLike, removeLike, deletePost } from \"../../actions/post\";\r\n\r\n// Purpose:\r\n//    1) To allow users to see the individual posts including who it was posted by on the posts page.\r\n//    2) To allow users to like, dislike, and delete post if the post was made by that user.\r\n\r\n// How it works:\r\n//    1) The PostItem function takes in addLike, removeLike, and deletePost actions from the actions/post\r\n// folder. The auth state and _id, text, name, avatar, user, likes, comments, date are deconstructed off\r\n// of the post state and brought in as parameters. The showActions default prop is also brought into\r\n// the PostItem function as a parameter.\r\n//    2) The PostItem function returns a div containing a Link fragment, a p tag with the text and date,\r\n// and a Fragment containing actions a user can do.\r\n//    3) The Link fragment provides a link to the users profile by linking to `/profile/:user` where\r\n// :user equals the value of user brought in from the deconstructed state of post.\r\n//    4) The text state is displayed in a p tag using JSX. The date state is displayed in a Moment fragment\r\n// with the format YYYY/MM/DD.\r\n//    5) The showActions state is called in a JSX function if showActions is true it returns a Fragment\r\n// (which it is as its currently set to true in this file, see PostItem.defaultProps).\r\n//    6) The Fragment contains a button with a onClick property that has the value of an anonymous function\r\n// calling the addLike function with _id as its parameter, an icon with a thumbs up symbol is displayed in a\r\n// i tag, and underneth that is a JSX function that checks to see if the likes array is longer than 0\r\n// if it is then it returns a span tag with the likes.length value.\r\n//    7) The Fragment contains another button with a onClick property that has the value of an anonymous\r\n// function calling the removeLike funciton with _id as its parameter, an icon with thumbs down symbol is\r\n// displayed in a i tag.\r\n//    8) The Fragment contains a Link fragment that provides a link to that post's page by directing to\r\n// `posts/:_id where :_id is the _id value of that post. A JSX function checks to see if the comments\r\n// array length is greater than 0 and if true returns a span of containing the value of comments.length\r\n//    9) Using JSX if auth.loading is false and user equals auth.user._id then a button tag is returned\r\n// that has an onClick property that is assigned to an anonymous function, passing in e, and calling\r\n// deletePost with _id as its parameters.\r\n//    10) The addLike, removeLike, and deletePost actions are defined as required functions in\r\n// PostItem.propTypes. The post and auth state are defined as required objects.\r\n\r\nconst PostItem = ({\r\n  addLike,\r\n  removeLike,\r\n  deletePost,\r\n  auth,\r\n  post: { _id, text, name, avatar, user, likes, comments, date },\r\n  showActions,\r\n}) => (\r\n  <div className=\"post bg-white p-1 my-1\">\r\n    <div>\r\n      <Link to={`/profile/${user}`}>\r\n        <img className=\"round-img\" src={avatar} alt=\"\" />\r\n        <h4>{name}</h4>\r\n      </Link>\r\n    </div>\r\n    <div>\r\n      <p className=\"my-1\">{text}</p>\r\n      <p className=\"post-date\">\r\n        Posted on <Moment format=\"YYYY/MM/DD\">{date}</Moment>\r\n      </p>\r\n      {showActions && (\r\n        <Fragment>\r\n          <button\r\n            onClick={(e) => addLike(_id)}\r\n            type=\"button\"\r\n            className=\"btn btn-light\"\r\n          >\r\n            <i className=\"fas fa-thumbs-up\"></i>{\" \"}\r\n            {likes.length > 0 && <span>{likes.length}</span>}\r\n          </button>\r\n          <button\r\n            onClick={(e) => removeLike(_id)}\r\n            type=\"button\"\r\n            className=\"btn btn-light\"\r\n          >\r\n            <i className=\"fas fa-thumbs-down\"></i>{\" \"}\r\n          </button>\r\n          <Link to={`post/${_id}`} className=\"btn btn-primary\">\r\n            Discussion{\" \"}\r\n            {comments.length > 0 && (\r\n              <span className=\"comment-count\">{comments.length}</span>\r\n            )}\r\n          </Link>\r\n          {!auth.loading && user === auth.user._id && (\r\n            <button\r\n              onClick={(e) => deletePost(_id)}\r\n              type=\"button\"\r\n              className=\"btn btn-danger\"\r\n            >\r\n              <i className=\"fas fa-times\"></i>\r\n            </button>\r\n          )}\r\n        </Fragment>\r\n      )}\r\n    </div>\r\n  </div>\r\n);\r\n\r\nPostItem.defaultProps = {\r\n  showActions: true,\r\n};\r\n\r\nPostItem.propTypes = {\r\n  addLike: PropTypes.func.isRequired,\r\n  removeLike: PropTypes.func.isRequired,\r\n  deletePost: PropTypes.func.isRequired,\r\n  post: PropTypes.object.isRequired,\r\n  auth: PropTypes.object.isRequired,\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n  auth: state.auth,\r\n});\r\n\r\nexport default connect(mapStateToProps, { addLike, removeLike, deletePost })(\r\n  PostItem\r\n);\r\n","import axios from \"axios\";\r\nimport { format } from \"prettier\";\r\nimport { setAlert } from \"./alert\";\r\nimport {\r\n  ADD_POST,\r\n  DELETE_POST,\r\n  GET_POSTS,\r\n  GET_POST,\r\n  POST_ERROR,\r\n  UPDATE_LIKES,\r\n  ADD_COMMENT,\r\n  DELETE_COMMENT,\r\n} from \"./types\";\r\n\r\n// Purpose:\r\n//    1) To handle all the application actions that will make a request to \"/api/posts\".\r\n// The actions that a user may trigger are getting all posts, adding a like, removing a like,\r\n// deleting a post, adding a post, getting a single post, adding a comment, and deleting a comment.\r\n//    2) To update the state of the application, if you arent already aware, we are using Redux.\r\n// All the states that are being updated in this file are found in reducers/post.js.\r\n\r\n// How it works:\r\n//    1) The getPosts function makes a GET request to \"/api/posts\". If successful it will dispatch\r\n// \"GET_POSTS\" and send the returned data found in res.data as a payload to be handled by the\r\n// \"GET_POSTS\" reducer else dispatches POST_ERROR with the error status and error message returned by\r\n// \"/api/posts\" as the payload.\r\n//    2) The addLike function takes in a postId and makes a PUT request to \"/api/posts/like/:postId\"\r\n// where :postId equals the passed in postId value. If successful it will dispatch \"UPDATE_LIKES\"\r\n// and send the returned data found in res.data as a likes array and the postId as a payload to be\r\n// handled by the \"UPDATE_LIKES\" reducer else dispatches POST_ERROR.\r\n//    3) The removeLike function takes in a postId and makes a PUT request to \"/api/posts/unlike/:postId\".\r\n// If successful it will dispatch \"UPDATE_LIKES\" and send the likes array and postId as a payload to be\r\n// handled by the \"UPDATE_LIKES\" reducer else dispatches POST_ERROR.\r\n//    4) The deletePost function takes in a postId and makes a DELETE request to \"/api/posts/:postId\".\r\n// If successful it will dispatch \"DELETE_POST\" with postId as a payload to be handled by the\r\n// \"DELETE_POST\" reducer and then will dispatch a setAlert action with \"Post Removed\" as its message.\r\n// If unsuccessful it will dispatch \"POST_ERROR\" with msg and status as its payload.\r\n//    5) The addPost function takes in an object named formData and creates a config object\r\n// with the neccessary headers for making a POST request to \"/api/posts\" sending with it the\r\n// config and formData objects. If successful it will dispatch \"ADD_POST\" with res.data as a payload\r\n// to be handled by the \"ADD_POST\" reducer and then will dispatch a setAlert action with \"Post Added\"\r\n// as its message. If unsuccessful it will dispatch \"POST_ERROR\".\r\n//    6) The getPost function (for single post) takes in a id and makes a GET request to \"/api/posts/:id\".\r\n// If successful it will dispatch \"GET_POST\" with res.data as a payload to be handled by the \"GET_POST\"\r\n// reducer. If unsuccessful it will dispatch \"POST_ERROR\".\r\n//    7) The addComment function takes in a postId and an object named formData. Creates a config object\r\n// with the necessary headers for making a POST request to \"/api/posts/comment/:postId/\" sending with it\r\n// the config and formData objects. If successful it will dispatch \"ADD_COMMENT\" with res.data as a payload\r\n// to be handled by the \"ADD_COMMENT\" reducer and then will dispatch a setAlert action with \"Comment Added\"\r\n// as its message. If unsuccessful it will dispatch \"POST_ERROR\".\r\n//    8) The deleteComment function takes in a postId and a commentId, and makes a DELETE request to\r\n// \"/api/posts/comment/:postId/:commentId\". If successful it will dispatch \"DELETE_COMMENT\" with commentId\r\n// as a payload to be handled by the \"DELETE_COMMENT\" reducer and then will dispatch a setAlert action\r\n// with \"Comment Removed\" as its message. If unsuccessful it will dispatch \"POST_ERROR\".\r\n\r\n// Get posts\r\nexport const getPosts = () => async (dispatch) => {\r\n  try {\r\n    const res = await axios.get(\"/api/posts\");\r\n\r\n    dispatch({\r\n      type: GET_POSTS,\r\n      payload: res.data,\r\n    });\r\n  } catch (err) {\r\n    dispatch({\r\n      type: POST_ERROR,\r\n      payload: { msg: err.response.statusText, status: err.response.status },\r\n    });\r\n  }\r\n};\r\n\r\n// Add like\r\nexport const addLike = (postId) => async (dispatch) => {\r\n  try {\r\n    const res = await axios.put(`/api/posts/like/${postId}`);\r\n\r\n    dispatch({\r\n      type: UPDATE_LIKES,\r\n      payload: { postId, likes: res.data }, // Sending the post id along with the returned array of likes\r\n    });\r\n  } catch (err) {\r\n    dispatch({\r\n      type: POST_ERROR,\r\n      payload: { msg: err.response.statusText, status: err.response.status },\r\n    });\r\n  }\r\n};\r\n\r\n// Remove like\r\nexport const removeLike = (postId) => async (dispatch) => {\r\n  try {\r\n    const res = await axios.put(`/api/posts/unlike/${postId}`);\r\n\r\n    dispatch({\r\n      type: UPDATE_LIKES,\r\n      payload: { postId, likes: res.data }, // Sending the post id along with the returned array of likes\r\n    });\r\n  } catch (err) {\r\n    dispatch({\r\n      type: POST_ERROR,\r\n      payload: { msg: err.response.statusText, status: err.response.status },\r\n    });\r\n  }\r\n};\r\n\r\n// Delete post\r\nexport const deletePost = (postId) => async (dispatch) => {\r\n  try {\r\n    const res = await axios.delete(`/api/posts/${postId}`);\r\n\r\n    dispatch({\r\n      type: DELETE_POST,\r\n      payload: postId,\r\n    });\r\n\r\n    dispatch(setAlert(\"Post Removed\", \"success\"));\r\n  } catch (err) {\r\n    dispatch({\r\n      type: POST_ERROR,\r\n      payload: { msg: err.response.statusText, status: err.response.status },\r\n    });\r\n  }\r\n};\r\n\r\n// Add post\r\nexport const addPost = (formData) => async (dispatch) => {\r\n  const config = {\r\n    headers: {\r\n      \"Content-Type\": \"application/json\",\r\n    },\r\n  };\r\n\r\n  try {\r\n    const res = await axios.post(`/api/posts`, formData, config);\r\n\r\n    dispatch({\r\n      type: ADD_POST,\r\n      payload: res.data,\r\n    });\r\n\r\n    dispatch(setAlert(\"Post Created\", \"success\"));\r\n  } catch (err) {\r\n    dispatch({\r\n      type: POST_ERROR,\r\n      payload: { msg: err.response.statusText, status: err.response.status },\r\n    });\r\n  }\r\n};\r\n\r\n// Get post\r\nexport const getPost = (id) => async (dispatch) => {\r\n  try {\r\n    const res = await axios.get(`/api/posts/${id}`);\r\n\r\n    dispatch({\r\n      type: GET_POST,\r\n      payload: res.data,\r\n    });\r\n  } catch (err) {\r\n    dispatch({\r\n      type: POST_ERROR,\r\n      payload: { msg: err.response.statusText, status: err.response.status },\r\n    });\r\n  }\r\n};\r\n\r\n// Add comment\r\nexport const addComment = (postId, formData) => async (dispatch) => {\r\n  const config = {\r\n    headers: {\r\n      \"Content-Type\": \"application/json\",\r\n    },\r\n  };\r\n\r\n  try {\r\n    const res = await axios.post(\r\n      `/api/posts/comment/${postId}`,\r\n      formData,\r\n      config\r\n    );\r\n\r\n    dispatch({\r\n      type: ADD_COMMENT,\r\n      payload: res.data,\r\n    });\r\n\r\n    dispatch(setAlert(\"Comment Added\", \"success\"));\r\n  } catch (err) {\r\n    dispatch({\r\n      type: POST_ERROR,\r\n      payload: { msg: err.response.statusText, status: err.response.status },\r\n    });\r\n  }\r\n};\r\n\r\n// Delete comment\r\nexport const deleteComment = (postId, commentId) => async (dispatch) => {\r\n  try {\r\n    const res = await axios.delete(`/api/posts/comment/${postId}/${commentId}`);\r\n\r\n    dispatch({\r\n      type: DELETE_COMMENT,\r\n      payload: commentId,\r\n    });\r\n\r\n    dispatch(setAlert(\"Comment Removed\", \"success\"));\r\n  } catch (err) {\r\n    dispatch({\r\n      type: POST_ERROR,\r\n      payload: { msg: err.response.statusText, status: err.response.status },\r\n    });\r\n  }\r\n};\r\n","import React, { useState } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { connect } from \"react-redux\";\r\nimport { addPost } from \"../../actions/post\";\r\n\r\n// Purpose:\r\n//    1) To allow a user to have the ability to create a post that will be displayed on the posts page.\r\n\r\n// How it works:\r\n//    1) The PostForm function takes in addPost, a function from the actions/post file.\r\n//    2) The PostForm function uses useState to create a constant named text and sets it to\r\n// an empty string. A setText function is also created off of useState.\r\n//    3) The PostForm function returns a div that contains a h3, form, textarea, and input tag.\r\n//    4) The form tag has an onSubmit property that has an anonymous function as its value. The anonymous\r\n// function takes in e (the event object) as a parameter. e.prevent.Default is called, addPost is called\r\n// with a object, containing the constant text, as its parameter.\r\n//    5) The textarea tag has an onChange property that has an anonymous function as its value. The anonymous\r\n// function takes in e. Then the setText function is called with e.target.value as its param that updates the\r\n// state of text.\r\n//    6) The addPost action is defined in PostForm.propTypes as a required function.\r\n\r\nconst PostForm = ({ addPost }) => {\r\n  const [text, setText] = useState(\"\");\r\n\r\n  return (\r\n    <div className=\"post-form\">\r\n      <div className=\"bg-primary p\">\r\n        <h3>Say Something...</h3>\r\n      </div>\r\n      <form\r\n        className=\"form my-1\"\r\n        onSubmit={(e) => {\r\n          e.preventDefault();\r\n          addPost({ text });\r\n          setText(\"\");\r\n        }}\r\n      >\r\n        <textarea\r\n          name=\"text\"\r\n          cols=\"30\"\r\n          rows=\"5\"\r\n          placeholder=\"Create a post\"\r\n          onChange={(e) => setText(e.target.value)}\r\n          required\r\n        ></textarea>\r\n        <input type=\"submit\" className=\"btn btn-dark my-1\" value=\"Submit\" />\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nPostForm.propTypes = {\r\n  addPost: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default connect(null, { addPost })(PostForm);\r\n","import React, { Fragment, useEffect } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { connect } from \"react-redux\";\r\nimport Spinner from \"../layout/Spinner\";\r\nimport { getPosts } from \"../../actions/post\";\r\nimport PostItem from \"./PostItem\";\r\nimport PostForm from \"./PostForm\";\r\n\r\n// Purpose:\r\n//    1) To display all posts posted by the applications users.\r\n//    2) To allow a user to access a form to add a post.\r\n\r\n// How it works:\r\n//    1) The Posts function takes in getPosts action and posts and loading state that is deconstructed\r\n// off of the post object.\r\n//    2) The useEffect hook is called with an anonymous function that calls the getPosts action, the\r\n// useEffect hook has getPosts as a dependency.\r\n//    3) The Posts function checks to see what the state of loading is. If the loading state is currently\r\n// true it will return a fragment named Spinner. Else it will return a Fragment containing a h1, p,\r\n// and a div tag. Along with the PostForm fragment.\r\n//    4) In the div tag a JSX function uses posts.map to map through the posts returning a fragment with\r\n// the name of PostItem with two props. A prop named key with the value of the post._id and a prop\r\n// named post with the value of the post state.\r\n//    5) The getPosts action is defined as a required function in Posts.propTypes and the post state\r\n// is defined as a required object.\r\n//    6) mapStateToProps defines the post state using state.post\r\n\r\nconst Posts = ({ getPosts, post: { posts, loading } }) => {\r\n  useEffect(() => {\r\n    getPosts();\r\n  }, [getPosts]);\r\n\r\n  return loading ? (\r\n    <Spinner />\r\n  ) : (\r\n    <Fragment>\r\n      <h1 className=\"large text-primary\">Posts</h1>\r\n      <p className=\"lead\">\r\n        <i className=\"fas fa-user\"> Welcome to the community!</i>\r\n      </p>\r\n      <PostForm />\r\n      <div className=\"posts\">\r\n        {posts.map((post) => (\r\n          <PostItem key={post._id} post={post} />\r\n        ))}\r\n      </div>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nPosts.propTypes = {\r\n  getPosts: PropTypes.func.isRequired,\r\n  post: PropTypes.object.isRequired,\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n  post: state.post,\r\n});\r\n\r\nexport default connect(mapStateToProps, { getPosts })(Posts);\r\n","import React, { useState } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { connect } from \"react-redux\";\r\nimport { addComment } from \"../../actions/post\";\r\n\r\n// Purpose:\r\n//    1) To create a form for a user to leave a comment on a post.\r\n\r\n// How it works:\r\n//    1) The CommentForm function takes in postId and addComment as parameters.\r\n//    2) The CommentForm function uses useState to create a constant named text and sets it to\r\n// an empty string. A setText function is also created off of useState.\r\n//    3) The CommentForm function returns a div that has a h3 tag asking the user to Leave a comment...,\r\n// a form tag with a textarea and input tag inside.\r\n//    4) The form tag has an onSubmit property that is assigned to an anonymous function that passes in e\r\n// (the event) as a parameter. e.preventDefault is called. An action called addComment with postId and a\r\n// object containing the text constant, that is from the useState hook, is passed in as parameters.\r\n// The addComment action is called with the parameters executing from the \"actions/post\" file. The setText\r\n// hook is called with empty strings to reset the state of the text constant.\r\n//    5) The textarea tag has name, cols, rows, placeholder, onChange, and required properties. The onChange\r\n// property is assigned to an anonymous function that passes in e as a parameter. the setText function is\r\n// called with e.target.value passed in as a parameter.\r\n//    6) The input tag has type and value properties assigned to submit and Submit, respectively.\r\n//    7) The addComment action is defined in CommentForm.propTypes as a required function.\r\n\r\nconst CommentForm = ({ postId, addComment }) => {\r\n  const [text, setText] = useState(\"\");\r\n  return (\r\n    <div className=\"post-form\">\r\n      <div className=\"bg-primary p\">\r\n        <h3>Leave a comment...</h3>\r\n      </div>\r\n      <form\r\n        className=\"form my-1\"\r\n        onSubmit={(e) => {\r\n          e.preventDefault();\r\n          addComment(postId, { text });\r\n          setText(\"\");\r\n        }}\r\n      >\r\n        <textarea\r\n          name=\"text\"\r\n          cols=\"30\"\r\n          rows=\"5\"\r\n          placeholder=\"Create a post\"\r\n          onChange={(e) => setText(e.target.value)}\r\n          required\r\n        ></textarea>\r\n        <input type=\"submit\" className=\"btn btn-dark my-1\" value=\"Submit\" />\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nCommentForm.propTypes = {\r\n  addComment: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default connect(null, { addComment })(CommentForm);\r\n","import React, { Fragment } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport PropTypes from \"prop-types\";\r\nimport { connect } from \"react-redux\";\r\nimport Moment from \"react-moment\";\r\nimport { deleteComment } from \"../../actions/post\";\r\n\r\n// Purpose:\r\n//    1) To display individual comments with each item having the user who posted it with the following data:\r\n// the link to the user's profile, name, avatar, date it was posted, and the text they entered.\r\n//    2) To allow each individual comment to be deleted if it belongs to the logged in user.\r\n\r\n// How it works:\r\n//    1) The CommentItem function takes in postId. Also takes in _id, text, name, avatar, user, and date,\r\n// that is deconstructed off of the comment parameter. Along with the auth state and deleteComment action.\r\n//    2) The CommentItem function returns a div that contains a div that has the user's profile information\r\n// and a div that contains the comment information.\r\n//    3) The div that contains the user's profile information is surrounded in a react-router-dom Link tag\r\n// that is directed to `profile/:user` where user is the value that references that user's profile. An image\r\n// of the user is displayed from 'avatar' and along with the name in a h4 tag using JSX.\r\n//    4) The div that contains the comment information displays the text using the 'text' parameter via JSX.\r\n//    5) The Moment fragment is used to display 'date' witht he format YYYY/MM/DD\r\n//    6) Using JSX if auth.loading is false and user equals auth.user._id then a button tag is returned\r\n// that has an onClick property that is assigned to an anonymous function, passing in e, and calling\r\n// deleteComment with postId and _id as its parameters.\r\n//    7) postId, comment, auth, and deleteComment are defined in CommentItem.propTypes. postId is defined as\r\n// a required string, comment and auth is defined as a required object, and deleteComment is defined as a required\r\n// function.\r\n//    8) mapStateToProps defines the auth state using state.auth\r\n\r\nconst CommentItem = ({\r\n  postId,\r\n  comment: { _id, text, name, avatar, user, date },\r\n  auth,\r\n  deleteComment,\r\n}) => (\r\n  <div className=\"post bg-white p-1 my-1\">\r\n    <div>\r\n      <Link to={`/profile/${user}`}>\r\n        <img className=\"round-img\" src={avatar} alt=\"\" />\r\n        <h4>{name}</h4>\r\n      </Link>\r\n    </div>\r\n    <div>\r\n      <p className=\"my-1\">{text}</p>\r\n      <p className=\"post-date\">\r\n        Posted on <Moment format=\"YYYY/MM/DD\">{date}</Moment>\r\n      </p>\r\n      {!auth.loading && user === auth.user._id && (\r\n        <button\r\n          onClick={(e) => deleteComment(postId, _id)}\r\n          type=\"button\"\r\n          className=\"btn btn-danger\"\r\n        >\r\n          <i className=\"fas fa-times\"></i>\r\n        </button>\r\n      )}\r\n    </div>\r\n  </div>\r\n);\r\n\r\nCommentItem.propTypes = {\r\n  postId: PropTypes.string.isRequired,\r\n  comment: PropTypes.object.isRequired,\r\n  auth: PropTypes.object.isRequired,\r\n  deleteComment: PropTypes.func.isRequired,\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n  auth: state.auth,\r\n});\r\n\r\nexport default connect(mapStateToProps, { deleteComment })(CommentItem);\r\n","import React, { Fragment, useEffect } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { connect } from \"react-redux\";\r\nimport Spinner from \"../layout/Spinner\";\r\nimport PostItem from \"../posts/PostItem\";\r\nimport CommentForm from \"../post/CommentForm\";\r\nimport CommentItem from \"../post/CommentItem\";\r\nimport { getPost } from \"../../actions/post\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\n// Purpose:\r\n//    1) To display an individual page for posts that consist of the post, comment form, and all\r\n// comments left under the post.\r\n\r\n// How it works:\r\n//    1) The Post function takes in getPost and match, along with post and loading that is deconstructed\r\n// off of the post object.\r\n//    2) The Post function uses useEffect to call an anonymous function that executes the getPost function\r\n// with match.params.id as a parameter. getPost is the dependency of useEffect.\r\n//    3) The Post function returns the Spinner fragment, brought in from layout, if loading or post is equal\r\n// to null. Else a Fragment with a Link to posts, PostItem, CommentForm, and CommentItem fragments is returned.\r\n//    4) The Link tag displays a button that once clicked brings user to /posts, where they can see every post.\r\n//    5) The PostItem fragment displays the individual post by setting a prop named post to the post state.\r\n// A showActions props is set to the value of false in order for us to reuse to PostItem fragment that is\r\n// created in the posts folder, but without having actions such as like, dislike, and delete, be displayed.\r\n//    6) The CommentForm fragment displays the commentForm passing in a prop named postId with the value\r\n// post._id that we get from the post state.\r\n//    7) In a div called comments there is a map function attached to the array of post.comments. The map\r\n// function takes in comment for its individual instance and returns the CommentItem fragment using a key with\r\n// the value of comment._id, a prop with the name comment has the value of comment, and a prop with the name\r\n// postId has the value of post._id\r\n//    8) getPost and post are defined in Post.propTypes. getPost is defined as a required function. The post\r\n// state is defined as a required object.\r\n//    9) mapStateToProps defines the post state using state.post\r\n\r\nconst Post = ({ getPost, post: { post, loading }, match }) => {\r\n  useEffect(() => {\r\n    getPost(match.params.id);\r\n  }, [getPost]);\r\n\r\n  return loading || post === null ? (\r\n    <Spinner />\r\n  ) : (\r\n    <Fragment>\r\n      <Link to=\"/posts\" className=\"btn\">\r\n        Back To Posts\r\n      </Link>\r\n      <PostItem post={post} showActions={false} />;\r\n      <CommentForm postId={post._id} />\r\n      <div className=\"comments\">\r\n        {post.comments.map((comment) => (\r\n          <CommentItem key={comment._id} comment={comment} postId={post._id} />\r\n        ))}\r\n      </div>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nPost.propTypes = {\r\n  getPost: PropTypes.func.isRequired,\r\n  post: PropTypes.object.isRequired,\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n  post: state.post,\r\n});\r\n\r\nexport default connect(mapStateToProps, { getPost })(Post);\r\n","import React from \"react\";\r\nimport { Route, Redirect } from \"react-router-dom\";\r\nimport PropTypes from \"prop-types\";\r\nimport { connect } from \"react-redux\";\r\n\r\n// Purpose:\r\n//    1) To turn a regular route into a private route by requiring authentication.\r\n\r\n// How it works:\r\n//    1) The PrivateRoute function takes in Component desctuctured off of componenet, isAuthenticated and\r\n// loading deconstructed off of the auth state, and any other props that are found using ...rest.\r\n//    2) The PrivateRoute function returns a Route passing in ...rest as a prop and a render prop.\r\n//    3) The render prop uses JSX to call an anonymous function that passes in props as a parameter and\r\n// and returns the result of an ternacy conditional that checks to see if isAuthenticated and loading both\r\n// have false values. If they do then a Redirect componenet is returned with a to attribute set to \"/login\",\r\n// which will take the user to the login page. Else, if not true that both isAuthenticated and loading have\r\n// false values then a component with the name Componenet will be returned with all passed in props using\r\n// ...props.\r\n//    4) The auth state is defined as a required object in PrivateRoute.propTypes.\r\n//    5) mapStateToProps defines auth using state.auth.\r\n\r\n// Creating private route component. Will redirect to login page for protected pages.\r\n// * Passing in the component of the loaded route, auth state, and any other props that\r\n// * is currently being sent by that route.\r\nconst PrivateRoute = ({\r\n  component: Component,\r\n  auth: { isAuthenticated, loading },\r\n  ...rest\r\n}) => (\r\n  <Route\r\n    {...rest}\r\n    render={(props) =>\r\n      !isAuthenticated && !loading ? (\r\n        <Redirect to=\"/login\" />\r\n      ) : (\r\n        <Component {...props} />\r\n      )\r\n    }\r\n  />\r\n);\r\n\r\nPrivateRoute.propTypes = {\r\n  auth: PropTypes.object.isRequired,\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n  auth: state.auth,\r\n});\r\n\r\nexport default connect(mapStateToProps)(PrivateRoute);\r\n","import { SET_ALERT, REMOVE_ALERT } from '../actions/types';\r\n\r\n// Purpose:\r\n//    1) To handle alert related actions and return the appropriate state. \r\n\r\n// How it works: \r\n//    1) The initialState constant is set to an empty array.\r\n//    2) An export default function is made that passes in state, that is given the value\r\n// of initialState, and action as a parameter. \r\n//    3) The action parameter is deconstructed to type and payload. \r\n//    4) A switch case is called that checks type.\r\n//    5) If the type that is passed into the switch case is equal to SET_ALERT then a \r\n// array containing the entirety of state array and the payload constant is returned. \r\n//    6) If the type that is passed into the switch case is equal to REMOVE_ALERT then a\r\n// filter method is called on state. The filter method passes in a single instance, alert,\r\n// and returns the values where alert.id does NOT equal the payload constant. The result of state.filter\r\n// is then returned.\r\n//    7) If the type that is passed into the switch case is equal to any other condition, then a\r\n// default case is called that returns the state array. \r\n\r\nconst initialState = [];\r\n\r\nexport default function(state = initialState, action) {\r\n    const { type, payload } = action;\r\n\r\n    switch(type) {\r\n        case SET_ALERT:\r\n            return [...state, payload];\r\n        case REMOVE_ALERT:\r\n            return state.filter(alert => alert.id !== payload);\r\n        default:\r\n            return state;\r\n    }\r\n}","import {\r\n  REGISTER_SUCCESS,\r\n  REGISTER_FAIL,\r\n  USER_LOADED,\r\n  AUTH_ERROR,\r\n  LOGIN_SUCCESS,\r\n  LOGIN_FAIL,\r\n  LOGOUT,\r\n  DELETE_ACCOUNT,\r\n} from \"../actions/types\";\r\n\r\n// Purpose:\r\n//    1) To handle auth related actions and return the appropriate state. \r\n\r\n// How it works:\r\n//    1) The initialState is set to an object containing keys: token, isAuthenticated, loading, user.\r\n// The token key is set to the value that is found from calling getItem, passing in token, on the \r\n// localStorage object. The rest of the keys' values are set to null. \r\n//    2) An export default function is made that passes in state, that is given the value\r\n// of initialState, and action as a parameter. \r\n//    3) The action parameter is deconstructed to type and payload. \r\n//    4) A switch case is called that checks type.\r\n//    5) If the type that is passed into the switch case is equal to USER_LOADED then a \r\n// object containing the entirety of state array, isAuthenticated set to true, loading set to false,\r\n// and user set to payload is returned.\r\n//    6) If the type that is passed into the switch case is equal to REGISTER_SUCCESS or LOGIN_SUCCESS\r\n// then the setItem method is called on the localStorage object and passes in the string token and the \r\n// constant of payload.token, respectively. Followed up by returning an object with the entirety of state \r\n// array, the entirety of payload array, isAuthenticated set to true, and loading set to false.  \r\n//    7) If the type that is passed into the switch case is equal to REGISTER_FAIL, AUTH_ERROR,\r\n// LOGIN_FAIL, LOGOUT, or DELETE_ACCOUNT, then the removeItem method is called on the localStorage object \r\n// and passes in the string token. Followed up by returning an object with the entirety of state array, \r\n// token set to false, isAuthenticated set to false, and loading set to false.\r\n//   8) If the type that is passed into the switch case is equal to any other condition, then a\r\n// default case is called that returns the state array. \r\n\r\nconst initialState = {\r\n  token: localStorage.getItem(\"token\"),\r\n  isAuthenticated: null,\r\n  loading: true,\r\n  user: null,\r\n};\r\n\r\nexport default function (state = initialState, action) {\r\n  const { type, payload } = action;\r\n  // Switch case for checking action type.\r\n  switch (type) {\r\n    case USER_LOADED:\r\n      return {\r\n        ...state,\r\n        isAuthenticated: true,\r\n        loading: false,\r\n        user: payload,\r\n      };\r\n    // Setting localStorage token from payload.\r\n    case REGISTER_SUCCESS:\r\n    case LOGIN_SUCCESS:\r\n      //* Setting the token to localStorage from the\r\n      //* token object that was added to the payload object.\r\n      //* This was done in the actions auth in the register function.\r\n      localStorage.setItem(\"token\", payload.token);\r\n      return {\r\n        ...state,\r\n        ...payload,\r\n        isAuthenticated: true,\r\n        loading: false,\r\n      };\r\n    // Removing localStorage token and returning null token.\r\n    // Setting isAuthenticated to false.\r\n    case REGISTER_FAIL:\r\n    case AUTH_ERROR:\r\n    case LOGIN_FAIL:\r\n    case LOGOUT:\r\n    case DELETE_ACCOUNT:\r\n      localStorage.removeItem(\"token\");\r\n      return {\r\n        ...state,\r\n        token: null,\r\n        isAuthenticated: false,\r\n        loading: false,\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","import {\r\n  GET_PROFILE,\r\n  PROFILE_ERROR,\r\n  CLEAR_PROFILE,\r\n  UPDATE_PROFILE,\r\n  GET_PROFILES,\r\n  GET_REPOS,\r\n  CLEAR_REPOS,\r\n} from \"../actions/types\";\r\n\r\n// Purpose:\r\n//    1) To handle profile related actions and return the appropriate state. \r\n\r\n// How it works:\r\n//    1) The initialState is set to an object containing keys: profile that is set to null, \r\n// profiles and repos that is set to empty arrays, loading that is set to true, and error that is set to an \r\n// empty object. An export default function is made that passes in state, that is given the value of initialState,\r\n// and action as a parameter. \r\n//    2) The action parameter is deconstructed to type and payload. A switch case is called that checks type.\r\n//    3) If the type that is passed into the switch case is equal to GET_PROFILE or UPDATE_PROFILE, then an object \r\n// containing the entirety of the state array, profile set to the payload constant, and loading set to false is returned. \r\n// If the type that is passed into the switch case is equal to GET_PROFILES, then an object containing the entirety of the \r\n// state array, profiles set to the payload constant, and loading set to false is returned. \r\n//    4) If the type that is passed into the switch case is equal to PROFILE_ERROR, then an object containing the entirety\r\n// of the state array, error set to payload, loading set to false, and profile set to null is returned.\r\n//    5) If the type that is passed into the switch case is equal to CLEAR_PROFILE, then an object containing the entirety\r\n// of the state array, profile is set to null, repos is set to an empty array, and loading set to false is returned.\r\n// If the type that is passed into the switch case is equal to CLEAR_REPOS, then an object containing the entirety of the\r\n// state array, repos is set to an empty array, and loading set to false is returned.\r\n//    6) If the type that is passed into the switch case is equal to GET_REPOS, then an object containing the entirety\r\n// of the state array, repos is set to the payload constant, and loading set to false is returned.\r\n//    7) If the type that is passed into the switch case is equal to any other condition, then a default case is called \r\n// that returns the state array. \r\n\r\n\r\nconst initialState = {\r\n  profile: null, // Loaded user profile\r\n  profiles: [], // For profile listing page\r\n  repos: [],\r\n  loading: true,\r\n  error: {},\r\n};\r\n\r\nexport default function (state = initialState, action) {\r\n  const { type, payload } = action;\r\n\r\n  switch (type) {\r\n    case GET_PROFILE:\r\n    case UPDATE_PROFILE:\r\n      return {\r\n        ...state,\r\n        profile: payload,\r\n        loading: false,\r\n      };\r\n    case GET_PROFILES:\r\n      return {\r\n        ...state,\r\n        profiles: payload,\r\n        loading: false,\r\n      };\r\n    case PROFILE_ERROR:\r\n      return {\r\n        ...state,\r\n        error: payload,\r\n        loading: false,\r\n        profile: null,\r\n      };\r\n    case CLEAR_PROFILE:\r\n      return {\r\n        ...state,\r\n        profile: null,\r\n        repos: [],\r\n        loading: false,\r\n      };\r\n    case GET_REPOS:\r\n      return {\r\n        ...state,\r\n        repos: payload,\r\n        loading: false,\r\n      };\r\n    case CLEAR_REPOS:\r\n      return {\r\n        ...state,\r\n        repos: null,\r\n        loading: false,\r\n      };\r\n    default: {\r\n      return state;\r\n    }\r\n  }\r\n}\r\n","import {\r\n  ADD_POST,\r\n  DELETE_POST,\r\n  GET_POSTS,\r\n  GET_POST,\r\n  POST_ERROR,\r\n  UPDATE_LIKES,\r\n  ADD_COMMENT,\r\n  DELETE_COMMENT,\r\n} from \"../actions/types\";\r\n\r\n// Purpose:\r\n//    1) To handle post related actions and return the appropriate state. \r\n\r\n// How it works:\r\n//    1) The initialState is set to an object containing keys: posts that is set to an empty array, post that is\r\n// set to null, loading that is set to true, and error that is set to an empty object. An export default function \r\n// is made that passes in state, that is given the value of initialState, and action as a parameter. \r\n//    2) The action parameter is deconstructed to type and payload. A switch case is called that checks type.\r\n//    3) If the type that is passed into the switch case is equal to GET_POSTS then an object containing the entirety \r\n// of the state array, posts set to the payload constant and loading set to false is returned. If the type that \r\n// is passed into the switch case is equal to GET_POST then a object containing the entirety of the state array, \r\n// post set to the payload constant, and loading set to false is returned. \r\n//    4) If the type that is passed into the switch case is equal to DELETE_POST, then an object containing the\r\n// entirety of the state array is returned. The object is also returned with post that is set to the result of the \r\n// filter method that is called on state.posts passing in a single instance, post, and returns the values where \r\n// post._id does NOT equal the payload constant. Lastly, setting loading to false within the returned object.\r\n//    5) If the type that is passed into the switch case is equal to ADD_POST, then an object containing the entirety\r\n// of the state array is returned. The object is also returned with post that is set to an array containing\r\n// payload and the entirety of state.posts, respectively. Lastly, setting loading to false within the returned object. \r\n//    6) If the type that is passed into the switch case is equal to POST_ERROR, then an object containing the entirety\r\n// of the state array is returned, error is set to payload, and loading is set to false.\r\n//    7) If the type that is passed into the switch case is equal to UPDATE_LIKES then, an object containing the\r\n// entirety of state array is returned. The object is also returned with posts that is set to the result of the map\r\n// method that is being called on state.posts. The map method called on state.posts is returning an object that\r\n// contains everything in the post state and likes that is set to payload.likes, respectively, if the single \r\n// instance, post, has a post._id value that is equal to the payload.postId value, or else just post is returned. \r\n// Lastly, the object is returned with loading set to false. \r\n//    8) If the type that is passed into the switch case is equal to ADD_COMMENT, then an object containing the\r\n// entirety of state array is returned. The object is also returned with posts that is set to an object containing\r\n// entirety of state.post array and comment that is set to payload. Lastly, the object is returned with loading set\r\n// to false.\r\n//    9) If the type that is passed into the switch case is equal to REMOVE_COMMENT, then an object containg the\r\n// entirety of state array is returned. The object is also returned with post that is set to an object that contains\r\n// entirety of state.post and comments that is set to the result of the filter method that is being called on \r\n// state.post.comments. The filter method that is called on state.post.comments passing in a single instance, \r\n// comments, and returns the values where comment._id does NOT equal the payload constant. Lastly, setting \r\n// loading to false within the returned object.\r\n//    10) If the type that is passed into the switch case is equal to any other condition, then a\r\n// default case is called that returns the state array. \r\n\r\nconst initialState = {\r\n  posts: [],\r\n  post: null,\r\n  loading: true,\r\n  error: {},\r\n};\r\n\r\nexport default function (state = initialState, action) {\r\n  const { type, payload } = action;\r\n\r\n  switch (type) {\r\n    case GET_POSTS:\r\n      return {\r\n        ...state,\r\n        posts: payload,\r\n        loading: false,\r\n      };\r\n    case GET_POST:\r\n      return {\r\n        ...state,\r\n        post: payload,\r\n        loading: false,\r\n      };\r\n    case DELETE_POST:\r\n      return {\r\n        ...state,\r\n        //** Going through all posts and returning all posts that do not have an id\r\n        //** that matches the payload which holds the id of the post to be deleted.\r\n        posts: state.posts.filter((post) => post._id !== payload),\r\n        loading: false,\r\n      };\r\n    case ADD_POST:\r\n      return {\r\n        ...state,\r\n        posts: [payload, ...state.posts], // Getting the current post state array and adding our payload.\r\n        loading: false,\r\n      };\r\n    case POST_ERROR:\r\n      return {\r\n        ...state,\r\n        error: payload,\r\n        loading: false,\r\n      };\r\n    case UPDATE_LIKES:\r\n      return {\r\n        ...state,\r\n        // Mapping through the posts, selecting the post that matches the post._id provided by the payload,\r\n        // then we are returning a new state with all of the post data and manipulating the likes count\r\n        // by updating the likes with the return likes from the payload.\r\n        // If it doesnt match the id we are just returning the post as is.\r\n        posts: state.posts.map((post) =>\r\n          post._id === payload.postId ? { ...post, likes: payload.likes } : post\r\n        ),\r\n        loading: false,\r\n      };\r\n    case ADD_COMMENT:\r\n      return {\r\n        ...state,\r\n        post: { ...state.post, comments: payload },\r\n        loading: false,\r\n      };\r\n    case DELETE_COMMENT:\r\n      return {\r\n        ...state,\r\n        post: {\r\n          ...state.post,\r\n          comments: state.post.comments.filter(\r\n            (comment) => comment._id !== payload\r\n          ),\r\n        },\r\n        loading: false,\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","import { combineReducers } from \"redux\";\r\nimport alert from \"./alert\";\r\nimport auth from \"./auth\";\r\nimport profile from \"./profile\";\r\nimport post from \"./post\";\r\n\r\n// Purpose:\r\n//    1) To provide a single access point for accessing all of the application's reducer functions.\r\n\r\n// How it works:\r\n//    1) An export default function named combineReducers is called with an object containing alert,\r\n// auth, profile, and post.\r\n\r\nexport default combineReducers({\r\n  alert,\r\n  auth,\r\n  profile,\r\n  post,\r\n});\r\n","import { createStore, applyMiddleware } from \"redux\";\r\nimport { composeWithDevTools } from \"redux-devtools-extension\";\r\nimport thunk from \"redux-thunk\";\r\nimport rootReducer from \"./reducers\";\r\n\r\n// Purpose:\r\n//    1) To create the store object for state management. \r\n//    2) To have the capability of using redux dev tools to monitor state behavior. \r\n\r\n// How it works:\r\n//    1) Initializes the initialState constant with an empty object. \r\n//    2) Initializes the middleware constant with an empty array.\r\n//    3) Sets the store constant to a function called createStore that passes in the rootReduer function (this is\r\n// the combineReducer function that is being exported in the index.js file reducers folder), initialState object,\r\n// and composeWithDevTools function.\r\n//    4) The function composeWithDevTools function takes in the function applyMiddleware that then takes in the\r\n// entirety of the middleware array. \r\n\r\n// * Creating store with necessary middleware *\r\nconst initialState = {};\r\n\r\nconst middleware = [thunk];\r\n\r\nconst store = createStore(\r\n  rootReducer,\r\n  initialState,\r\n  composeWithDevTools(applyMiddleware(...middleware))\r\n);\r\n\r\nexport default store;\r\n","import React, { Fragment, useEffect } from \"react\";\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\nimport Navbar from \"./components/layout/Navbar\";\nimport Landing from \"./components/layout/Landing\";\nimport Login from \"./components/auth/Login\";\nimport Register from \"./components/auth/Register\";\nimport Alert from \"./components/layout/Alert\";\nimport Dashboard from \"./components/dashboard/Dashboard\";\nimport CreateProfile from \"./components/profile-forms/CreateProfile\";\nimport EditProfile from \"./components/profile-forms/EditProfile\";\nimport AddExperience from \"./components/profile-forms/AddExperience\";\nimport AddEducation from \"./components/profile-forms/AddEducation\";\nimport Profiles from \"./components/profiles/Profiles\";\nimport Profile from \"./components/profile/Profile\";\nimport Posts from \"./components/posts/Posts\";\nimport Post from \"./components/post/Post\";\nimport PrivateRoute from \"./components/routing/PrivateRoute\";\n// Redux\nimport { Provider } from \"react-redux\";\nimport store from \"./store\";\n// Auth\nimport setAuthToken from \"./utils/setAuthToken\";\nimport { loadUser } from \"./actions/auth\";\n\nimport \"./App.css\";\n\n// Purpose:\n//    1) To be the main focal point of the application.\n//    2) To handle all the routing of the pages by deciding which routes should load what components.\n//    3) To decide which routes will be public and which routes will be private, meaning need valid\n// login credentials.\n//    4) To make a token found in localStorage become a default token through setAuthToken.\n\n// How it works:\n//    1) Calls an If-Else statement and checks for a valid value of localStorage.token, if the value\n// is valid then the setAuthToken function is called passing in localStorage.token as a parameter.\n//    2) The function App calls a useEffect hook that makes a dispatch request to the store object. \n// The dispatch action is called with the loadUser action as its parameter. The useEffect hook uses \n// no dependencies. \n//    3) The function App returns a Provider fragment with a prop named store set to the store object. \n// Inside that Provider fragment, a Router fragment contains a Fragment and inside that Fragment first \n// is a Navbar fragment. Followed by a Route fragment with props exact path pointing to the root location \n// of the application and the prop component set to Landing, loading the Landing component on \"/\" visit. \n// The Route Fragment loading the Landing component is followed by a section that acts as the web pages\n// container. Inside this section are an Alert and a Switch fragment. \n//    4) The Switch fragment contains: a Route fragment where a visit to \"/register\" loads the Register \n// component, a Route Fragment where a visit to \"/login\" loads the Login component, a Route fragment where\n// a visit to \"/profiles\" loads the Profiles component, a Route fragment where a visit to \"/profile/:id\" \n// loads the Profile component.\n//    5) The Switch fragment also contains and uses PrivateRoute fragments, which functionality we defined in \n// components/routing/PrivateRoute.js, such as, a PrivateRoute fragment where a visit to \"/dashboard\" loads \n// the Dashboard component, a PrivateRoute fragment where a visit to \"/create-profile\" loads the CreateProfile\n// component, a PrivateRoute fragment where a visit to \"/edit-profile\" loads the EditProfile component, a \n// PrivateRoute fragment where a visit to \"/add-experience\" loads the AddExperience component, a PrivateRoute\n// fragment where a visit to \"/add-education\" loads the AddEducation component, a PrivateRoute fragment\n// where a visit to \"/posts\" loads the Posts component, and a PrivateRoute fragment where a visit to \"posts/:id\"\n// loads the Post component. \n\nif (localStorage.token) {\n  setAuthToken(localStorage.token);\n}\n\nconst App = () => {\n  useEffect(() => {\n    store.dispatch(loadUser());\n  }, []);\n\n  return (\n    <Provider store={store}>\n      <Router>\n        <Fragment>\n          <Navbar />\n          <Route exact path=\"/\" component={Landing} />\n          <section className=\"container\">\n            <Alert />\n            <Switch>\n              <Route exact path=\"/register\" component={Register} />\n              <Route exact path=\"/login\" component={Login} />\n              <Route exact path=\"/profiles\" component={Profiles} />\n              <Route exact path=\"/profile/:id\" component={Profile} />\n              <PrivateRoute exact path=\"/dashboard\" component={Dashboard} />\n              <PrivateRoute\n                exact\n                path=\"/create-profile\"\n                component={CreateProfile}\n              />\n              <PrivateRoute\n                exact\n                path=\"/edit-profile\"\n                component={EditProfile}\n              />\n              <PrivateRoute\n                exact\n                path=\"/add-experience\"\n                component={AddExperience}\n              />\n              <PrivateRoute\n                exact\n                path=\"/add-education\"\n                component={AddEducation}\n              />\n              <PrivateRoute exact path=\"/posts\" component={Posts} />\n              <PrivateRoute exact path=\"/post/:id\" component={Post} />\n            </Switch>\n          </section>\n        </Fragment>\n      </Router>\n    </Provider>\n  );\n};\n\nexport default App;\n","// Purpose: To report web vitals ?\n\n// How it works: Idk, ask Google.\n\n\nconst reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\n// Purpose:\n//    1) To load the React application as a fragment.\n//    2) To render the React application and attach it to the div with the Id of the root in the \n// index.html file within the public directory. \n//    3) To run reportWebVitals.\n\n// How it works:\n//    1) The render method is called on the ReactDOM package. The render method takes in the fragment\n// React.StrictMode and within it our imported App function as a fragment.\n//    2) The React.StrictMode fragment element is then supplied/ attached to the div element with an id of\n// root that acts as the React applications container. Our website is now a working React application \n// that now only updates the appropriate container node's children versus the entire node on every state change.\n//    3) Calls the function reportWebVitals.\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}